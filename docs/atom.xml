<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>捷径</title>
  
  
  <link href="http://fintech-path.github.io/atom.xml" rel="self"/>
  
  <link href="http://fintech-path.github.io/"/>
  <updated>2023-07-26T03:18:11.634Z</updated>
  <id>http://fintech-path.github.io/</id>
  
  <author>
    <name>Fintech Path</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java 10 新特性</title>
    <link href="http://fintech-path.github.io/2023/07/26/java10/"/>
    <id>http://fintech-path.github.io/2023/07/26/java10/</id>
    <published>2023-07-26T03:10:00.000Z</published>
    <updated>2023-07-26T03:18:11.634Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>一直使用 JAVA8，用了好久好久了，最近突然有想法，能不能把后边所有版本的新特性总结一下呢？<br>说干就干，今天第二篇 JAVA10 新特性。</p><h3 id="一、集合新增-copyOf-方法"><a href="#一、集合新增-copyOf-方法" class="headerlink" title="一、集合新增 copyOf 方法"></a>一、集合新增 copyOf 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JAVA10 集合新增 copyOf 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyOfTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 of 方法创建结合，均不可修改，后边均会报错</span></span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">        Set&lt;Integer&gt; set = Set.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        Map&lt;String, Integer&gt; map = Map.of(<span class="string">&quot;one&quot;</span>, <span class="number">1</span>, <span class="string">&quot;two&quot;</span>, <span class="number">2</span>, <span class="string">&quot;three&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            set.add(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;four&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// copyOf方法，用于创建一个不可变集合的副本</span></span><br><span class="line">        List&lt;String&gt; originalList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        originalList.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        originalList.add(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        originalList.add(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; copyList = List.copyOf(originalList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// forEach方法的增强</span></span><br><span class="line">        List&lt;Integer&gt; numbers = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        numbers.parallelStream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="二、var-关键字-局部变量类型推断"><a href="#二、var-关键字-局部变量类型推断" class="headerlink" title="二、var 关键字(局部变量类型推断)"></a>二、var 关键字(局部变量类型推断)</h3><p>新增 var 关键字，只能用于局部变量，不能用于方法的参数、方法返回值、类的字段等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  JAVA10 新增 var 关键字，只能用于局部变量，不能用于方法的参数、方法返回值、类的字段等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">var</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;number:&quot;</span> + number +<span class="string">&quot;;pi=&quot;</span> + pi);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;234&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;message:&quot;</span> + message);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">numbers</span> <span class="operator">=</span> List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        map.put(<span class="number">123</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        numbers.forEach(System.out::println);</span><br><span class="line">        map.forEach((key, value) -&gt; System.out.println(map.get(key)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>以上就是开发者可以使用的JAVA 10 新特性了， 因为是个过渡版本，所以实际新增的特性并不多，希望能够帮助到大家，如果有什么问题，直接联系我们。</p>]]></content>
    
    
    <summary type="html">&lt;!-- toc --&gt;

&lt;p&gt;一直使用 JAVA8，用了好久好久了，最近突然有想法，能不能把后边所有版本的新特性总结一下呢？&lt;br&gt;说干就干，今天第二篇 JAVA10 新特性。&lt;/p&gt;
&lt;h3 id=&quot;一、集合新增-copyOf-方法&quot;&gt;&lt;a href=&quot;#一、集合新增-copyOf-方法&quot; class=&quot;headerlink&quot; title=&quot;一、集合新增 copyOf 方法&quot;&gt;&lt;/a&gt;一、集合新增 copyOf 方法&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * JAVA10 集合新增 copyOf 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CopyOfTest&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 通过 of 方法创建结合，均不可修改，后边均会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;String&amp;gt; list = List.of(&lt;span class=&quot;string&quot;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Set&amp;lt;Integer&amp;gt; set = Set.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map&amp;lt;String, Integer&amp;gt; map = Map.of(&lt;span class=&quot;string&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            set.add(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.put(&lt;span class=&quot;string&quot;&gt;&amp;quot;four&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// copyOf方法，用于创建一个不可变集合的副本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;String&amp;gt; originalList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        originalList.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        originalList.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        originalList.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;String&amp;gt; copyList = List.copyOf(originalList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// forEach方法的增强&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Integer&amp;gt; numbers = List.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        numbers.parallelStream().forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java" scheme="http://fintech-path.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://fintech-path.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java 9 新特性</title>
    <link href="http://fintech-path.github.io/2023/07/26/java9/"/>
    <id>http://fintech-path.github.io/2023/07/26/java9/</id>
    <published>2023-07-26T03:10:00.000Z</published>
    <updated>2023-07-26T03:18:11.641Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>一直使用 JAVA8，用了好久好久了，最近突然有想法，能不能把后边所有版本的新特性总结一下呢？<br>说干就干，今天第一篇 JAVA9 新特性。</p><h3 id="一、钻石操作符支持匿名内部类"><a href="#一、钻石操作符支持匿名内部类" class="headerlink" title="一、钻石操作符支持匿名内部类"></a>一、钻石操作符支持匿名内部类</h3><p>实际上可以更简洁地初始化泛型类型，但是，之前已经存在 Map.of 和 List.of&#x2F;Arrays.asList，再写个这个意义何在？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java 9 中的钻石操作符支持匿名内部类，实际上可以更简洁地初始化泛型类型</span></span><br><span class="line"><span class="comment"> * 但是，之前已经存在 Map.of 和 List.of/Arrays.asList，再写个这个意义何在？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiamondOperatorExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// JDK 8 中是new HashMap&lt;String, Integer&gt;</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">&quot;One&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            put(<span class="string">&quot;Two&quot;</span>, <span class="number">2</span>);</span><br><span class="line">            put(<span class="string">&quot;Three&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// JDK 8 中是new ArrayList&lt;String&gt;</span></span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()&#123;&#123;</span><br><span class="line">            add(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">            add(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">            add(<span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="二、stream-增强"><a href="#二、stream-增强" class="headerlink" title="二、stream 增强"></a>二、stream 增强</h3><ol><li>takeWhile是遇到第一个不符合的元素时停止，即使后边仍然有满足的元素，并返回前面的。</li><li>dropWhile是遇到第一个不符合的元素时停止，丢弃前面所有满足的元素，返回后边的元素。</li><li>ofNullable() 方法允许我们创建一个包含单个元素的 Stream，如果传入的元素是非空的，则创建一个包含该元素的 Stream；如果传入的元素是空值（null），则创建一个空的 Stream。这对于处理可能为空的元素很有用，可以避免空指针异常。</li><li>iterator() 方法的重载， list.spliterator()以及StreamSupport.stream结合使用返回 stream。</li><li>Optional 和 Stream 的结合，实际上可以类似于 List.stream()方法，同样使用optional.stream()。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.StreamSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JAVA9 stream 增强</span></span><br><span class="line"><span class="comment"> * 1. takeWhile是遇到第一个不符合的元素时停止，即使后边仍然有满足的元素，并返回前面的</span></span><br><span class="line"><span class="comment"> * 2. dropWhile是遇到第一个不符合的元素时停止，丢弃前面所有满足的元素，返回后边的元素</span></span><br><span class="line"><span class="comment"> * 3. ofNullable() 方法允许我们创建一个包含单个元素的 Stream，如果传入的元素是非空的</span></span><br><span class="line"><span class="comment"> * 则创建一个包含该元素的 Stream；如果传入的元素是空值（null）</span></span><br><span class="line"><span class="comment"> * 则创建一个空的 Stream。这对于处理可能为空的元素很有用，可以避免空指针异常。</span></span><br><span class="line"><span class="comment"> * 4. iterator() 方法的重载， list.spliterator()以及StreamSupport.stream结合使用返回 stream</span></span><br><span class="line"><span class="comment"> * 5. Optional 和 Stream 的结合，实际上可以类似于 List.stream()方法，同样使用optional.stream()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamAPIExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====takeWhile======&quot;</span>);</span><br><span class="line">        <span class="comment">// takeWhile是遇到第一个不符合的元素时停止，即使后边仍然有满足的元素，并返回前面的</span></span><br><span class="line">        Stream&lt;Integer&gt; stream1 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line">        Stream&lt;Integer&gt; filteredStream1 = stream1.takeWhile(n -&gt; n &lt; <span class="number">5</span>);</span><br><span class="line">        filteredStream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====dropWhile=====&quot;</span>);</span><br><span class="line">        <span class="comment">// dropWhile是遇到第一个不符合的元素时停止，丢弃前面所有满足的元素，返回后边的元素</span></span><br><span class="line">        Stream&lt;Integer&gt; stream2 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line">        Stream&lt;Integer&gt; filteredStream2 = stream2.dropWhile(n -&gt; n &lt; <span class="number">5</span>);</span><br><span class="line">        filteredStream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====ofNullable=====&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream3 = Stream.ofNullable(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        stream3.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; stream4 = Stream.ofNullable(<span class="literal">null</span>);</span><br><span class="line">        stream4.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====iterator() 方法的重载=====&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; stream = StreamSupport.stream(list.spliterator(), <span class="literal">false</span>);</span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===== Optional 和 Stream 之间的结合进=====&quot;</span>);</span><br><span class="line">        Optional&lt;String&gt; optional = Optional.of(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        optional.stream()</span><br><span class="line">                .map(String::toUpperCase)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="三、新增私有接口方法（private-interface-method）"><a href="#三、新增私有接口方法（private-interface-method）" class="headerlink" title="三、新增私有接口方法（private interface method）"></a>三、新增私有接口方法（private interface method）</h3><p>MyInterface.java测试接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JAVA9 新增私有接口方法（private interface method）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// 公共抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用私有接口方法</span></span><br><span class="line">        privateMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a default method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有接口方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a private method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClass.java，测试接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a public method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        myObj.publicMethod();   <span class="comment">// 调用公共抽象方法</span></span><br><span class="line">        myObj.defaultMethod();  <span class="comment">// 调用默认方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、新增Reactive-Streams-API"><a href="#四、新增Reactive-Streams-API" class="headerlink" title="四、新增Reactive Streams API"></a>四、新增Reactive Streams API</h3><p>Data.java测试实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Data</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DataProcessor.java，消息订阅类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JAVA9 新增Reactive Streams API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataProcessor</span> <span class="keyword">implements</span> <span class="title class_">Subscriber</span>&lt;Data&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建数据源，例如从数据库中获取数据</span></span><br><span class="line">        <span class="type">DataPublisher</span> <span class="variable">dataPublisher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPublisher</span>();</span><br><span class="line">        <span class="comment">// 创建数据处理器</span></span><br><span class="line">        <span class="type">DataProcessor</span> <span class="variable">dataProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataProcessor</span>();</span><br><span class="line">        <span class="comment">// 连接数据源和数据处理器</span></span><br><span class="line">        dataPublisher.subscribe(dataProcessor);</span><br><span class="line">        <span class="comment">// 发布数据</span></span><br><span class="line">        dataPublisher.publishData(<span class="keyword">new</span> <span class="title class_">Data</span>(<span class="number">1</span>, <span class="string">&quot;Zhangsan&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Subscription subscription)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subscription = subscription;</span><br><span class="line">        <span class="built_in">this</span>.subscription.request(<span class="number">1</span>); <span class="comment">// 请求一个数据项</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(Data data)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理接收到的数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Received data: &quot;</span> + data);</span><br><span class="line">        <span class="comment">// 请求下一个数据项</span></span><br><span class="line">        subscription.request(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误情况</span></span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 数据处理完成</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Data processing completed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DataPublisher.java，消息发布类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.reactivestreams.Publisher;</span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Subscriber;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataPublisher</span> <span class="keyword">implements</span> <span class="title class_">Publisher</span>&lt;Data&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Subscriber&lt;? <span class="built_in">super</span> Data&gt;&gt; subscribers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataPublisher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subscribers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(Subscriber&lt;? <span class="built_in">super</span> Data&gt; subscriber)</span> &#123;</span><br><span class="line">        subscribers.add(subscriber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishData</span><span class="params">(Data data)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Subscriber&lt;? <span class="built_in">super</span> Data&gt; subscriber : subscribers) &#123;</span><br><span class="line">            subscriber.onNext(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Subscriber&lt;? <span class="built_in">super</span> Data&gt; subscriber : subscribers) &#123;</span><br><span class="line">            subscriber.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Subscriber&lt;? <span class="built_in">super</span> Data&gt; subscriber : subscribers) &#123;</span><br><span class="line">            subscriber.onError(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、允许在-try-with-resources-语句中使用资源的定义和初始化"><a href="#五、允许在-try-with-resources-语句中使用资源的定义和初始化" class="headerlink" title="五、允许在 try-with-resources 语句中使用资源的定义和初始化"></a>五、允许在 try-with-resources 语句中使用资源的定义和初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java 9 允许在 try-with-resources 语句中使用资源的定义和初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryWithResourcesExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;TO_MODIFIED_DOC_PATH&quot;</span>))) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>以上就是开发者可以使用的JAVA9 新特性了，希望能够帮助到大家，如果有什么问题，直接联系我们。</p>]]></content>
    
    
    <summary type="html">&lt;!-- toc --&gt;

&lt;p&gt;一直使用 JAVA8，用了好久好久了，最近突然有想法，能不能把后边所有版本的新特性总结一下呢？&lt;br&gt;说干就干，今天第一篇 JAVA9 新特性。&lt;/p&gt;
&lt;h3 id=&quot;一、钻石操作符支持匿名内部类&quot;&gt;&lt;a href=&quot;#一、钻石操作符支持匿名内部类&quot; class=&quot;headerlink&quot; title=&quot;一、钻石操作符支持匿名内部类&quot;&gt;&lt;/a&gt;一、钻石操作符支持匿名内部类&lt;/h3&gt;&lt;p&gt;实际上可以更简洁地初始化泛型类型，但是，之前已经存在 Map.of 和 List.of&amp;#x2F;Arrays.asList，再写个这个意义何在？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Java 9 中的钻石操作符支持匿名内部类，实际上可以更简洁地初始化泛型类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 但是，之前已经存在 Map.of 和 List.of/Arrays.asList，再写个这个意义何在？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;DiamondOperatorExample&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// JDK 8 中是new HashMap&amp;lt;String, Integer&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map&amp;lt;String, Integer&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;() &amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            put(&lt;span class=&quot;string&quot;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            put(&lt;span class=&quot;string&quot;&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            put(&lt;span class=&quot;string&quot;&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Integer&amp;gt; entry : map.entrySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(entry.getKey() + &lt;span class=&quot;string&quot;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + entry.getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// JDK 8 中是new ArrayList&amp;lt;String&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;String&amp;gt; names = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;()&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Charlie&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String name : names) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java" scheme="http://fintech-path.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://fintech-path.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>图数据库及相关算法在解决客户投诉代理识别中的应用</title>
    <link href="http://fintech-path.github.io/2023/07/11/anti-agent/"/>
    <id>http://fintech-path.github.io/2023/07/11/anti-agent/</id>
    <published>2023-07-11T08:45:00.000Z</published>
    <updated>2023-07-26T02:47:43.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在处理投诉过程中公司监测到投诉人存在非法代理虚假投诉现象，疑似非法代理人&#x2F;机构以所谓征信洗白、伪造证明材料、向监管机构缠访、闹访等赚取不当利益的代理行为，协助客户与公司协商，要求处理合同相关问题（包括但不限于删除逾期征信，减免息费），非法代理行为不仅危害公司利益且易引发更多的恶意投诉。<br>针对此问题本项目通过业务部门采集的客户投诉电话号码以及投诉人提供的接受资料的电子邮箱等信息来判断客户是否为代理人员。<br>我们采用图数据的形式整理展现数据，让本来略显杂乱的数据直观的展现出来。非技术人员也能通过图的展示轻易找到并准确判断哪些客户是代理人员。并且通过图嵌入算法将图中的节点以向量形式表达，供给机器学习模型作为特征使用，实现了较为准确的分类。<br>通过分类鉴别代理人员，将结果反馈给相关业务人员。可以提高服务的效率并提升服务质量。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>整合原始数据，将整理后的数据按照图数据库的要求进行数据转换，将处理好的数据通过专用的图数据软件工具（Neo4j）做直观展示。<br>同时对图数据的节点做特征提取（Embedding），最后可以将提取好的特征做分类算法，从而判断是否为代理人。<br>如下图所示：<br><img src="/../img/anti-agent/overview.png" alt="整体思路"></p><h3 id="图数据库选型"><a href="#图数据库选型" class="headerlink" title="图数据库选型"></a>图数据库选型</h3><p>鉴于本项目的数据存放，特征提取以及基本关系展示都利用到了图数据库，选择一个合适的技术方案是否重要。<br>如下是目前流行的几个具备开源版本的图数据库：<br><img src="/../img/anti-agent/graphdb.png" alt="图数据库"></p><p>考虑到初始化的研发投入，社区支持，工具丰富度等因素，以及对于未来大规模企业化应用的支持，我们选择了Neo4j。</p><h3 id="数据处理和格式转换"><a href="#数据处理和格式转换" class="headerlink" title="数据处理和格式转换"></a>数据处理和格式转换</h3><p>图数据库中有不同类型的节点，如邮件，电话，客户，节点之间存在关联，表示某一客户通过某一电话来电投诉，或留下某一邮件地址作为后续联络方式等：<br><img src="/../img/anti-agent/graph.png" alt="图展示"><br>对于业务人员记录的邮箱信息，会有部分信息遗漏造成数据缺失的问题，我们通过从邮件的原始信息中，用正则匹配的方式来提取用户的邮箱信息，来对邮箱数据进行补充。</p><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>我们采取两步走的方式，首先根据图结构训练图中每个节点的embedding向量，然后将embedding向量结果提供给后续机器学习分类模型作为特征使用。<br>本着从易到难的路径，我们对不同的图嵌入（Embedding）算法和分类算法分别进行了尝试：<br><img src="/../img/anti-agent/algorithms.png" alt="算法"></p><h4 id="图嵌入算法-vs-统计特征"><a href="#图嵌入算法-vs-统计特征" class="headerlink" title="图嵌入算法 vs 统计特征"></a>图嵌入算法 vs 统计特征</h4><p>基于图嵌入算法生成的embedding向量可以计算每一对节点的相似度，相似度越大则两个节点之间越有可能产生连接。<br>对于我们的异构图模型，目标是要进行用户节点的分类，所以只需比较每一对用户节点的相似度，两用户节点间跳数越少，相似度越大。<br>因此我们利用embedding计算出的余弦相似度作为用户节点对的score，选择score阈值0.8。针对某一个用户，记录该用户所在的连通图中关联的所有用户数total_u，并计算出与该用户相似度score&gt;&#x3D;0.8且在连通图的所有用户数top_u。<br>选择多组用户的准确率avg(sum(top_u&#x2F;total_u))作为评估指标，对embedding进行评估。</p><p>我们首先选择适用于异构图的经典图嵌入算法metapath2vec，并分别使用两个图算法框架SellarGraph和Pytorch Geometric来实现该算法。<br>算法首先要在图中选取由节点类型构成的组合路径，基于meta path在图上进行随机游走。但是基于PyG实现的metapath2vec目前只支持单一meta path，训练结果embedding结果不佳。基于StellarGraph实现的metapath2vec可以支持multi-meta path，但是训练的loss值过高，无法使用。<br>后续又尝试了阿里的GATNE异构图Embedding算法。GATNE算法包括两种：GATNE-T和GATNE-I。</p><p>GATNE(General Attributed Multiplex HeTerogeneous Network Embedding)算法模型获取了丰富的属性信息并且利用了不同节点的多重拓扑结构。<br>GATNE的主要特点如下：<br>① 定义了属性复用异构图嵌入问题；<br>② GATNE支持直推式学习（GATNE-T）和归纳式学习（GATNE-I）。并且理论证明了本文的直推式模型比现有的模型更一般化；<br>③ 有很好的可扩展性，可处理上亿级别的节点和十亿级别的边。</p><p><img src="https://img-blog.csdnimg.cn/20200313235320640.png" alt="GATNE"></p><p>GATNE-T的embedding再经过数轮的调优后，结果可用。<br>以下是GATNE-T的调优结果：<br><img src="/../img/anti-agent/GATNE.png" alt="GATNE调优"></p><p>但是GATNE-T不能单独为新加入的节点生成Embedding，也就是不能使用训练集训练好的参数，用户生成（训练时不可见的）测试集的节点嵌入表示，必须重新训练。由于计算资源的限制（没有GPU），每次重新训练需要5天之久，完全不能满足业务需求。<br>为此，我们还尝试了neo4j提供的HashGNN，训练时间可以满足，但是模型效果不好。<br>在模型效果和时效性上，GATNE-T和HashGNN让我们陷入了两难的境地。只能另寻出路，尝试传统的统计聚合类型的特征+图特征。<br>这三种特征提取方案的比较如下：<br><img src="/../img/anti-agent/feature.png" alt="特征提取"></p><p>最终上线模型没有采用Embedding算法来计算用户特征，而是使用了传统的统计聚合类型的特征+图特征来替换了Embedding特征。</p><h4 id="分类算法"><a href="#分类算法" class="headerlink" title="分类算法"></a>分类算法</h4><p>本项目要解决的问题目标是判断用户是否为投诉代理，所以可以看成是二分类问题。<br>除了模型使用的测试数据，又使用近2个月新数据作为验证数据，对模型进行了验证。但是模型对于新数据的预测结果不理想，模型泛化能力较弱。考虑是正负样本数据不均衡原因导致，使用SMOTE算法构建新的少数类样本，评测指标有所提升。<br>分类算法特征：得到图嵌入模型生成的n维（我们模型是200维）后，直接用这200维特征作为机器学习分类算法的特征。<br>分类算法的分类标签：一是业务标记的代理，二是有共用电子邮箱（提供接受资料的邮箱）的用户标记为代理。<br>我们选取了四种机器学习算法模型进行了测试：LR, SVM, RF, XGBoost。<br>样本总数量：67520<br>代理样本（标签为1）数量：1735<br>非代理样本（标签为0）数量：65785<br>评估指标：AUC和准确率<br>对比测试结果：<br><img src="/../img/anti-agent/xgboost.png" alt="分类算法对比"></p><p>XGBoost胜出！</p><p>对于特征提取算法+分类算法所产生的结果，我们使用F1 Score来进行评估，要求不低于0.8才能上线。鉴于使用统计特征+图特征所带来的相对于GATNE-T的减分（F1 Score：0.78），我们又将神经网络引入，结合前述的三类特征提取算法，有了如下比较：<br><img src="/../img/anti-agent/result.png" alt="结果"><br>可以看出，利用较少的统计特征+图特征进行特征提取，后续使用神经网络进行分类，即满足了计算结果的时效性，也能提供一个比较不错的结果（F1 Score： 0.84）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在处理投诉过程中公司监测到投诉人存在非法代理虚假投诉现象，疑似非法代理人&amp;#x2F;机构以所谓征信洗白、伪造证明材料、向监管</summary>
      
    
    
    
    <category term="graphdb" scheme="http://fintech-path.github.io/categories/graphdb/"/>
    
    <category term="machine learning" scheme="http://fintech-path.github.io/categories/graphdb/machine-learning/"/>
    
    
    <category term="graphdb" scheme="http://fintech-path.github.io/tags/graphdb/"/>
    
    <category term="embedding" scheme="http://fintech-path.github.io/tags/embedding/"/>
    
    <category term="neural network" scheme="http://fintech-path.github.io/tags/neural-network/"/>
    
  </entry>
  
  <entry>
    <title>关于我们</title>
    <link href="http://fintech-path.github.io/2023/06/30/welcome/"/>
    <id>http://fintech-path.github.io/2023/06/30/welcome/</id>
    <published>2023-06-30T07:27:00.000Z</published>
    <updated>2023-07-26T02:47:43.615Z</updated>
    
    <content type="html"><![CDATA[<p>我们是一群对信息数字化技术有兴趣，有热情的金融领域的从业人员，创建这个网站，是想把在工作，学习之中的实践，想法，感悟做一个的记录，也期待能够做到积累，甚至帮助他人。</p><p>这个网站叫“捷径”，但其实“<strong>捷</strong>” 字仅仅是一个关于我们来自何方的暗示，并非对网站内容的自傲和宣传。恰恰相反，对于技术的演进，数字化的探索，通常没有捷径，不论是系统研发，架构设计，云原生平台，安全技术，每一个领域的落地都往往伴随着失败，试错，妥协，改进，正是在这些略显枯燥，却蕴含挑战的循环中，诞生出服务于企业和客户的数字化解决方案，提高效率，实现价值。而这个网站仅仅是记录我们在企业数字化发展“路径”中的所得，所思，所感，故名为“<strong>捷径</strong>”，期待在这里能和更多的同行交流，学习，成长。</p><p>关于网站内容，主要聚焦技术领域的方方面面，前端，后端，开发，设计，架构，安全，AI，数据，初期有可能略显混乱，但现实中最大的挑战却是能否长久的坚持。也期待未来这里能够成长为一个较高水平的技术博客。</p><p>最后，在对应github的空间，也有一些小伙伴的开源作品 <a href="https://github.com/fintech-path">https://github.com/fintech-path</a> ，有需要的朋友可以参考，也欢迎大家的参与或提出意见。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们是一群对信息数字化技术有兴趣，有热情的金融领域的从业人员，创建这个网站，是想把在工作，学习之中的实践，想法，感悟做一个的记录，也期待能够做到积累，甚至帮助他人。&lt;/p&gt;
&lt;p&gt;这个网站叫“捷径”，但其实“&lt;strong&gt;捷&lt;/strong&gt;” 字仅仅是一个关于我们来自何</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React Hooks</title>
    <link href="http://fintech-path.github.io/2023/03/16/react-hooks/"/>
    <id>http://fintech-path.github.io/2023/03/16/react-hooks/</id>
    <published>2023-03-16T08:45:17.000Z</published>
    <updated>2023-07-26T02:47:43.614Z</updated>
    
    <content type="html"><![CDATA[<p>Reactjs是一个用于构建用户界面的JavaScript库，它提供了一种称为Hooks的特性，让你可以在函数组件中使用状态和其他React特性，而不需要写类组件。</p><h2 id="Reactjs提供了以下几种Hooks"><a href="#Reactjs提供了以下几种Hooks" class="headerlink" title="Reactjs提供了以下几种Hooks"></a>Reactjs提供了以下几种Hooks</h2><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a><code>useState</code></h3><ul><li><code>useState</code>: 用于在函数组件中添加状态。它返回一个状态变量和一个更新该变量的函数。你可以在组件中多次使用<code>useState</code>来定义多个状态变量。</li></ul><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><code>useEffect</code></h3><ul><li><code>useEffect</code>: 用于在函数组件中执行副作用，如数据获取、订阅、定时器等。它接受一个函数作为参数，该函数会在每次渲染后执行。你可以在组件中多次使用<code>useEffect</code>来定义多个副作用。</li></ul><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a><code>useContext</code></h3><ul><li><code>useContext</code>：用于在函数组件中访问React的上下文。它接受一个上下文对象作为参数，并返回该上下文的当前值。你可以使用<code>useContext</code>来避免通过多层组件传递props。</li></ul><span id="more"></span><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a><code>useReducer</code></h3><ul><li><code>useReducer</code>：用于在函数组件中管理复杂的状态逻辑。它接受一个reducer函数和一个初始状态作为参数，并返回一个当前状态和一个分发action的函数。你可以使用<code>useReducer</code>来替代<code>useState</code>，当你的状态逻辑包含多个子值或者依赖于之前的状态时。</li></ul><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a><code>useCallback</code></h3><ul><li><code>useCallback</code>：用于在函数组件中缓存函数。它接受一个内联函数和一个依赖数组作为参数，并返回该函数的缓存版本。你可以使用<code>useCallback</code>来避免不必要的重新渲染，当你把函数作为props传递给子组件时。</li></ul><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a><code>useMemo</code></h3><ul><li><code>useMemo</code>：用于在函数组件中缓存计算结果。它接受一个创建值的函数和一个依赖数组作为参数，并返回该值的缓存版本。你可以使用<code>useMemo</code>来避免重复计算，当你的计算结果依赖于一些变化较少的值时。</li></ul><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a><code>useRef</code></h3><ul><li><code>useRef</code>: 用于在函数组件中创建可变的引用对象。它接受一个初始值作为参数，并返回一个包含当前值属性（<code>.current</code>) 的对象。你可以使用<br><code>useRef</code><br>来保存任何可变值，而不会触发重新渲染，例如DOM元素、定时器ID等。</li></ul><h3 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a><code>useImperativeHandle</code></h3><ul><li><code>useImperativeHandle</code>: 用于在自定义Hook中自定义暴露给父组件的ref对象。它接受一个ref对象和一个创建ref对象当前值属性（<code>.current</code>) 的回调函数作为参数，并将回调函数返回<br>的结果分配给ref对象当前值属性（<code>.current</code>) 。你可以使用<br><code>useImperativeHandle</code><br>来控制父组件通过ref访问子组件实例时能够访问到什么内容。</li></ul><h3 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a><code>useLayoutEffect</code></h3><ul><li><code>useLayoutEffect</code>: 与<br><code>useEffect</code><br>类似，但是会在所有DOM更改之后同步执行副作用回调，在浏览器绘制之前执行回调，在大多数情况下应该优先使用<br><code>useEffect</code><br>，除非需要从DOM读取布局并同步触发更新，在这种情况下应该使用<br><code>useLayoutEffect</code></li></ul><h3 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a><code>useDebugValue</code></h3><ul><li><code>useDebugValue</code>: 可以被自定义Hook开发者使用，在 React DevTools 中显示自定义hook标签。</li></ul><h2 id="以下是一些使用Hooks的示例代码"><a href="#以下是一些使用Hooks的示例代码" class="headerlink" title="以下是一些使用Hooks的示例代码"></a>以下是一些使用Hooks的示例代码</h2><h3 id="useState-1"><a href="#useState-1" class="headerlink" title="useState"></a><code>useState</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个名为count的状态变量，初始值为0</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数，用于增加count的值</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数，用于减少count的值</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示count的值和两个按钮</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useEffect-1"><a href="#useEffect-1" class="headerlink" title="useEffect"></a><code>useEffect</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Clock</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个名为time的状态变量，初始值为当前时间</span></span><br><span class="line">  <span class="keyword">const</span> [time, setTime] = <span class="title function_">useState</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useEffect定义一个副作用，每隔一秒更新time的值</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个定时器ID</span></span><br><span class="line">    <span class="keyword">const</span> timerID = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setTime</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个清理函数，在组件卸载时取消定时器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timerID);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// 空数组表示只在组件挂载时执行一次</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示当前时间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>现在是：&#123;time.toLocaleTimeString()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useReducer-1"><a href="#useReducer-1" class="headerlink" title="useReducer"></a><code>useReducer</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个reducer函数，根据action的类型更新state</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 使用useReducer定义一个名为state的状态变量和一个名为dispatch的函数，初始值为&#123;count:0&#125;</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示state.count的值和两个按钮</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前计数：&#123;state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useCallback-1"><a href="#useCallback-1" class="headerlink" title="useCallback"></a><code>useCallback</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; increment &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示一个按钮</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个名为count的状态变量，初始值为0</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useCallback定义一个函数，用于增加count的值，并将count作为依赖项</span></span><br><span class="line">  <span class="keyword">const</span> increment = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示count的值和Child组件</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">increment</span>=<span class="string">&#123;increment&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useContext-1"><a href="#useContext-1" class="headerlink" title="useContext"></a><code>useContext</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个名为ThemeContext的上下文对象，并设置默认值为light</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="string">&quot;light&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个名为theme的状态变量，初始值为dark</span></span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数，用于切换theme的值</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toggleTheme</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setTheme</span>(<span class="function">(<span class="params">prevTheme</span>) =&gt;</span> (prevTheme === <span class="string">&quot;dark&quot;</span> ? <span class="string">&quot;light&quot;</span> : <span class="string">&quot;dark&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，使用ThemeContext.Provider包裹子组件，并传递theme作为value属性</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前主题：&#123;theme&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleTheme&#125;</span>&gt;</span>切换主题<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Toolbar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Toolbar</span>(<span class="params"></span>) &#123;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reactjs是一个用于构建用户界面的JavaScript库，它提供了一种称为Hooks的特性，让你可以在函数组件中使用状态和其他React特性，而不需要写类组件。&lt;/p&gt;
&lt;h2 id=&quot;Reactjs提供了以下几种Hooks&quot;&gt;&lt;a href=&quot;#Reactjs提供了以下几种Hooks&quot; class=&quot;headerlink&quot; title=&quot;Reactjs提供了以下几种Hooks&quot;&gt;&lt;/a&gt;Reactjs提供了以下几种Hooks&lt;/h2&gt;&lt;h3 id=&quot;useState&quot;&gt;&lt;a href=&quot;#useState&quot; class=&quot;headerlink&quot; title=&quot;useState&quot;&gt;&lt;/a&gt;&lt;code&gt;useState&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;useState&lt;/code&gt;: 用于在函数组件中添加状态。它返回一个状态变量和一个更新该变量的函数。你可以在组件中多次使用&lt;code&gt;useState&lt;/code&gt;来定义多个状态变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;useEffect&quot;&gt;&lt;a href=&quot;#useEffect&quot; class=&quot;headerlink&quot; title=&quot;useEffect&quot;&gt;&lt;/a&gt;&lt;code&gt;useEffect&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;useEffect&lt;/code&gt;: 用于在函数组件中执行副作用，如数据获取、订阅、定时器等。它接受一个函数作为参数，该函数会在每次渲染后执行。你可以在组件中多次使用&lt;code&gt;useEffect&lt;/code&gt;来定义多个副作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;useContext&quot;&gt;&lt;a href=&quot;#useContext&quot; class=&quot;headerlink&quot; title=&quot;useContext&quot;&gt;&lt;/a&gt;&lt;code&gt;useContext&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;useContext&lt;/code&gt;：用于在函数组件中访问React的上下文。它接受一个上下文对象作为参数，并返回该上下文的当前值。你可以使用&lt;code&gt;useContext&lt;/code&gt;来避免通过多层组件传递props。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="http://fintech-path.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://fintech-path.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="react.js" scheme="http://fintech-path.github.io/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化测试的挑战和应对</title>
    <link href="http://fintech-path.github.io/2023/03/16/fe-auto-testing/"/>
    <id>http://fintech-path.github.io/2023/03/16/fe-auto-testing/</id>
    <published>2023-03-16T06:48:17.000Z</published>
    <updated>2023-07-26T02:47:43.614Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：</p><ul><li>前端界面变更频繁，导致测试用例失效或难以维护</li><li>前端界面涉及多种元素和交互，导致测试用例复杂或不稳定</li><li>前端界面需要适配多种浏览器和设备，导致测试用例覆盖不全或执行缓慢</li></ul><p>针对这些挑战，有以下一些建议：</p><span id="more"></span><ul><li>选择合适的自动化测试框架。前端自动化的流派主要分为三类：基于录制回放技术的自动化测试框架，基于对文档对象模型 (DOM）对象进行解析的自动化测试框架，以及基于图像识别的自动化测试框架。每种框架都有其优缺点和适用场景，需要根据项目的特点和需求进行选择。</li><li>优先进行单元测试和服务测试。前端项目通常UI变化频繁，一旦发生变化，UI测试用例就无法执行且难以维护，所以UI自动化测试的成本高，收益小；相比UI测试，Service测试更加简单直接且变化不会很频繁；单元测试主要对公共函数、方法进行测试，测试用例复用度高且更能保证代码质量。因此，在进行前端自动化测试时，应该优先考虑单元测试和服务测试，并尽量覆盖所有可能出现的情况。</li><li>使用云测平台或容器技术。为了解决前端界面需要适配多种浏览器和设备的问题，可以使用云测平台或容器技术来提供多样化的环境和资源，并实现并行执行、实时监控、远程调试等功能。这样可以节省本地资源、提高执行速度、增强可靠性。</li></ul><p>那么如何编写高质量的前端自动化测试用例呢？</p><p>编写高质量的前端自动化用例是一项重要的技能，它可以帮助你更有效地验证前端功能和界面，发现并修复缺陷，提升软件质量。<br>以下是一些编写高质量的前端自动化用例的原则和规范：</p><ul><li>针对稳定且重要的业务基础代码编写测试用例，比如通用组件、通用算法和数据模块等，避免频繁变更的UI元素和交互。</li><li>遵循测试用例编写的统一格式，包括测试编号、测试标题、测试目标、测试步骤、预期结果、实际结果等，并使用清晰明确的语言描述。</li><li>设计合理且完备的测试数据，覆盖正常情况和异常情况，并尽量使用真实或接近真实的数据。</li><li>采用模块化和参数化的方式编写测试用例，提高复用性和可维护性，并避免硬编码和冗余代码。</li><li>使用断言或检查点来验证预期结果是否与实际结果一致，并在出现错误时及时报告并记录日志。</li><li>定期执行回归测试，并根据产品需求或代码变更及时更新或删除无效或过时的测试用例。</li></ul><p>自动化测试工具：</p><p>前端自动化测试工具有很多种，以下是一些常用的前端自动化测试工具：</p><ul><li>Karma：一个测试运行平台，可以在多个真实浏览器中运行测试用例，并提供实时反馈。它可以集成多种测试框架（如Jasmine、Mocha等）和断言库（如Chai、Sinon等），并支持代码覆盖率报告和持续集成。</li><li>Jest：一个基于Jasmine的JavaScript测试框架，可以对React、Vue等前端框架进行单元测试和快照测试。它内置了断言库、模拟库、代码覆盖率工具等功能，并提供了简洁的API和快速的执行速度。</li><li>Selenium：一个用于Web应用程序自动化测试的工具，可以模拟用户在浏览器中的操作，并验证预期结果。它支持多种编程语言（如Java、Python、Ruby等）和浏览器（如Chrome、Firefox、IE等），并提供了WebDriver API和IDE插件。</li><li>Cypress：一个全新的前端自动化测试框架，可以对Web应用程序进行端到端的集成测试。它不需要依赖Selenium或其他外部服务，而是直接运行在浏览器中，并提供了丰富的API和图形界面。</li></ul>]]></content>
    
    
    <summary type="html">&lt;!-- toc --&gt;

&lt;p&gt;前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端界面变更频繁，导致测试用例失效或难以维护&lt;/li&gt;
&lt;li&gt;前端界面涉及多种元素和交互，导致测试用例复杂或不稳定&lt;/li&gt;
&lt;li&gt;前端界面需要适配多种浏览器和设备，导致测试用例覆盖不全或执行缓慢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对这些挑战，有以下一些建议：&lt;/p&gt;</summary>
    
    
    
    <category term="测试" scheme="http://fintech-path.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="http://fintech-path.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 浅析</title>
    <link href="http://fintech-path.github.io/2023/03/10/nodejs-brief/"/>
    <id>http://fintech-path.github.io/2023/03/10/nodejs-brief/</id>
    <published>2023-03-10T06:48:17.000Z</published>
    <updated>2023-07-26T02:47:43.614Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="什么是-Node-js"><a href="#什么是-Node-js" class="headerlink" title="什么是 Node.js"></a>什么是 Node.js</h2><p>官方定义 Node.js 是一个开源的，跨平台的 Javascript 运行时环境。</p><p>要理解这个定义需要从 Javascript 的前身谈起。在 2009 年 Node.js 出现之前，Javascript 只能运行在浏览器中，作为网页脚本使用。而 Node.js 的出现，使 Javascript 可以象其它编程语言一样运行在计算机上，Node.js 之于 Javascript 可以类比 JRE 之于 Java。所以 Node.js 不是一个编程语言，也不是一个 Javascript 框架，它是一整套 Javascript 的运行时环境（Runtime）。</p><p>由于 Node.js 的出现，使 Javascript 彻底摆脱浏览器成为一门独立的编程语言。和其它编程语言 Python, Java, Rube 等一样，除了本身擅长前端开发以外，Javascript 也可以开发后台、GUI程序、CLI命令行工具等等。Javascript 有庞大开发者基础，所以 Node.js 的出现使基于 Javascript 的技术栈直接井喷。</p><p>Node.js 的安装使用可以参考：<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js Tutorial</a></p><span id="more"></span><h2 id="Node-js-的特点"><a href="#Node-js-的特点" class="headerlink" title="Node.js 的特点"></a>Node.js 的特点</h2><p>Node.js 本身的核心模块包括文件系统I&#x2F;O、网络（HTTP、TCP、UDP、DNS、TLS&#x2F;SSL等）、二进制数据流、加密算法、数据流等等。Node.js 模块的 API 形式简单，降低了编程的复杂度。</p><p>Node.js 的最大特点在于它基于高性能的 Chrome V8 引擎，提供了一个单线程 NIO (非阻塞队列) 的事件驱动模型。这使它极其高效和轻量级。</p><p><img src="/img/node/nodejs-nio.webp"></p><p>如上图所示，Node.js 的核心是一个事件驱动的单线程非阻塞 Event Loop 用来处理所有的请求（由于是单线程，所以不需要锁，避免了多线程带来的复杂性和开销），这样的设计让 Node.js 非常擅于 IO 密集型的应用，能够充分用效的利用硬件资源，从而提供更高的并发性能。</p><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>引用：<a href="https://medium.com/deno-the-complete-reference/node-js-vs-springboot-hello-world-performance-comparison-59b4d461526c">Node.js vs Springboot: Hello world performance comparison</a></p><p>传统 Spring Boot 和 Node.js 的性能对比。<br><strong>需要说明的是这并不是一个严谨的比较，因为基于 Java 语言也有很多优秀的 NIO 模型框架，比如 Netty、以及基于 Netty 的 spring5-webflux，其提供了恐怖的并发性能。所以这个比较只是一个示例，用于说明 Node.js 在特定场景下的的优势，仅供参考。勿喷。</strong></p><p><img src="/img/node/performance.requests.webp"><br><img src="/img/node/performance.cpu.webp"><br><img src="/img/node/performance.memory.webp"></p><h2 id="Node-js-的适用场景"><a href="#Node-js-的适用场景" class="headerlink" title="Node.js 的适用场景"></a>Node.js 的适用场景</h2><p>迄今为止 Node.js 发展出了一个庞大且完善的生态系统，提供了各种各样的第三方模块和工具，例如 Express、Koa、Nest 以及数不清的 Javascript Library。但传统的语言比如 Java 在生态方面一样非常强大。</p><p>从业务角度来讲 Node.js 的最大优点是易上手、开发简单速度快，Javascript 的语言特性可以让开发者以极快的速度响应不断变化的业务场景，前后端可以用同一种语言实现代码复用。另外生态强大就意味着轮子多，文档完善，有什么需求找合适的轮子直接用，提高生产效率。所以 Node.js 在开发轻量级、快速迭代、实时交互等类型的 Web 应用程序方面是有优势的。</p><p>从技术角度来讲，轻量、快速、实时的网络应用程序，例如聊天、游戏、社交等领域是 Node.js 的强项。</p><p>从资源占用方面来讲，Node.js 通常可以让你用更少的代价去高效的利用资源（CPU、Memory…），以支撑更高的访问量。</p><p>相反的，重量级、稳定可靠、安全保密等类型的 Web 应用程序，可能并不适合用 Node.js 来进行开发。但 Node.js 的社区也在不断发展，需要持续关注 Node.js 带来的可能性。</p>]]></content>
    
    
    <summary type="html">&lt;!-- toc --&gt;

&lt;h2 id=&quot;什么是-Node-js&quot;&gt;&lt;a href=&quot;#什么是-Node-js&quot; class=&quot;headerlink&quot; title=&quot;什么是 Node.js&quot;&gt;&lt;/a&gt;什么是 Node.js&lt;/h2&gt;&lt;p&gt;官方定义 Node.js 是一个开源的，跨平台的 Javascript 运行时环境。&lt;/p&gt;
&lt;p&gt;要理解这个定义需要从 Javascript 的前身谈起。在 2009 年 Node.js 出现之前，Javascript 只能运行在浏览器中，作为网页脚本使用。而 Node.js 的出现，使 Javascript 可以象其它编程语言一样运行在计算机上，Node.js 之于 Javascript 可以类比 JRE 之于 Java。所以 Node.js 不是一个编程语言，也不是一个 Javascript 框架，它是一整套 Javascript 的运行时环境（Runtime）。&lt;/p&gt;
&lt;p&gt;由于 Node.js 的出现，使 Javascript 彻底摆脱浏览器成为一门独立的编程语言。和其它编程语言 Python, Java, Rube 等一样，除了本身擅长前端开发以外，Javascript 也可以开发后台、GUI程序、CLI命令行工具等等。Javascript 有庞大开发者基础，所以 Node.js 的出现使基于 Javascript 的技术栈直接井喷。&lt;/p&gt;
&lt;p&gt;Node.js 的安装使用可以参考：&lt;a href=&quot;https://www.runoob.com/nodejs/nodejs-tutorial.html&quot;&gt;Node.js Tutorial&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://fintech-path.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="nodejs" scheme="http://fintech-path.github.io/tags/nodejs/"/>
    
    <category term="前端" scheme="http://fintech-path.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
