{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img/node/nodejs-nio.webp","path":"img/node/nodejs-nio.webp","modified":0,"renderable":0},{"_id":"source/img/node/performance.cpu.webp","path":"img/node/performance.cpu.webp","modified":0,"renderable":0},{"_id":"source/img/node/performance.memory.webp","path":"img/node/performance.memory.webp","modified":0,"renderable":0},{"_id":"source/img/node/performance.requests.webp","path":"img/node/performance.requests.webp","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/nodejs-brief.md","hash":"4d99835e584d297ec38295de7f72d64b0f6642b2","modified":1688716689637},{"_id":"source/_posts/.DS_Store","hash":"a6b40f6fd0908bf0bc4ef4acb51caba499ae3028","modified":1678436470887},{"_id":"source/_posts/welcome.md","hash":"8bf0ed4d89d2230b2ffd81d189f90f40098c6118","modified":1688717129847},{"_id":"source/.DS_Store","hash":"b044e6b85e43b1e716e542735cf411e97975b608","modified":1682473164542},{"_id":"source/_posts/fe-auto-testing.md","hash":"3d82c7e50caf7c4bc659e84ba9b8a116631c4215","modified":1688716622635},{"_id":"source/_posts/react-hooks.md","hash":"6132f646be0fc08e0c6ae7d2108689d66b2f311d","modified":1688716667115},{"_id":"source/img/node/nodejs-nio.webp","hash":"c591753488cf827cfe4c7bb1267053d1506181aa","modified":1678946565580},{"_id":"source/img/node/performance.memory.webp","hash":"aec46e4074f9e4c173bf287036c0af9c0a961e8f","modified":1678946565581},{"_id":"source/img/node/performance.cpu.webp","hash":"d53acd1120be4bb09fcb5d13acffc993dfd98d29","modified":1678946565580},{"_id":"source/img/node/performance.requests.webp","hash":"ca2282779e7d4e10460558b7658012056b642846","modified":1678946565581},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1678437380419},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1678437380344},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"75db783b805785377db28d4cb844ee65bb7be613","modified":1678437380362},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1678437380427},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1678437380349},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"ec6596b63bfb4349ba61792d905abe8e06fea625","modified":1678437380354},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"0ca35dec92ccf383f45db905db1a5a0e92d7209e","modified":1678437380349},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"99bf235042d0c57af15d2f108ba5eda77443fea8","modified":1678437380359},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1678437380370},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1678437380411},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1678437380370},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1678437380420},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1678437380422},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1678437380411},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1678437380411},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1678437380422},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1678437380943},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1678437380943},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1678437380947},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1666765343897},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1678437380945},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1678437380945},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1678437380947},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1678437380945},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1678437380945},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1678437380945},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1678437380946},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1678437380946},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1678437380946},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1678437380349},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1678437380946},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1678437380349},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1678437380946},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1678437380946},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1678437380355},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1678437380354},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1678437380349},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1678437380354},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1678437380343},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1678437380338},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1678437380836},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1678437380836},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1678437380833},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1678437380830},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1678437380830},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1678437380833},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1678437380833},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1678437380836},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1678437380836},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1678437380836},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1678437380941},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1678437380941},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1678437380836},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1678437380843},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1678437380941},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"1d06eee32ea1fcb3162227eb1d7d19be39b6f5e3","modified":1678437380370},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1678437380365},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1678437380374},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1678437380413},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1678437380419},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"2ec1f511f32e3a9c86d49f1338f57ae5ece18898","modified":1678437380411},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1678437380411},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"4816c9099a881b5f7b13af3e42caae36edbffccd","modified":1678437380422},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1678437380413},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1678437380422},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":1678437380419},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1678437380365},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1678437380941},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1678437380361},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1678437380422},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1678437380538},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1678437380943},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1678437380947},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1678437380943},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1678437380840},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1678437380840},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1678437380945},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1678437380830},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1678437380349},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1678437380361},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":1678437380362},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1678437380348},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1678437380361},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1678437380349},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1678437380361},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1678437380366},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1678437380353},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1678437380344},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1678437380354},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1678437380365},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1678437380365},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1678437380366},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1678437380355},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1678437380361},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1678437380365},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1678437380329},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1678437380343},{"_id":"public/atom.xml","hash":"0e2425298e9c6de42347497d95628b7ff90d66dc","modified":1688717136420},{"_id":"public/content.json","hash":"45e4d7289269b94e5ab45b1023612eeb8906c9bd","modified":1688717136420},{"_id":"public/search.xml","hash":"a19a6897ef73770fd82a5e64b3f533adedc49190","modified":1688717136420},{"_id":"public/sitemap.xml","hash":"7323fc837d7c5fc6366f55a776676c05501a0aa1","modified":1688717136420},{"_id":"public/sitemap.txt","hash":"73d7cab04ae88617176c1621932512e797072cde","modified":1688717136420},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1688717136420},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1688717136420},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1688717136420},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1688717136420},{"_id":"public/manifest.json","hash":"5e5719343a57a5a4b1955e74c9d2c7f9c45c673f","modified":1688717136420},{"_id":"public/archives/2023/06/index.html","hash":"6cc2d6f6a6c067d54c94ddfaf96f4f624d9d29b6","modified":1688717136420},{"_id":"public/2023/06/30/welcome/index.html","hash":"8590228038a9c2e581e2c7456b983e86180b36a9","modified":1688717136420},{"_id":"public/2023/03/16/react-hooks/index.html","hash":"864d45708f9d743281f13a1041ab0a74d644c57b","modified":1688717136420},{"_id":"public/2023/03/16/fe-auto-testing/index.html","hash":"66e8c23b007a4ad81a2db66466f678831b3515b0","modified":1688717136420},{"_id":"public/2023/03/10/nodejs-brief/index.html","hash":"9ed337aaef6bc5fd170c1a10527803b7899c5b1b","modified":1688717136420},{"_id":"public/archives/index.html","hash":"54135879c40196db3fd2ca5c26bf9f9a4d28da4c","modified":1688717136420},{"_id":"public/archives/2023/index.html","hash":"c36125743e00a95ef9a183823eaaa68b6a67b002","modified":1688717136420},{"_id":"public/archives/2023/03/index.html","hash":"3d6910b299e85fb16270076e71ab8e2787f9dbf8","modified":1688717136420},{"_id":"public/categories/测试/index.html","hash":"9437f0792faf8a6cddadf34c6af690968fed4bf1","modified":1688717136420},{"_id":"public/categories/前端/index.html","hash":"417f5bb8afee524eace05b6508a8e445d82f26cf","modified":1688717136420},{"_id":"public/index.html","hash":"3107a05b213ebb388df10d3f7ea2e43806528654","modified":1688717136420},{"_id":"public/tags/测试/index.html","hash":"3b8f379cb15575d022a24f382a83e91b875bb23b","modified":1688717136420},{"_id":"public/tags/react-js/index.html","hash":"0c116e8ae06b6aa09844d71c3dfc33aa808e0bda","modified":1688717136420},{"_id":"public/tags/前端/index.html","hash":"65c64034180e667bb1f4fb2d449c873c8080c979","modified":1688717136420},{"_id":"public/tags/nodejs/index.html","hash":"0fb14f99275314b5210d816a79d135059d5c7011","modified":1688717136420},{"_id":"public/categories/index.html","hash":"ea036d4b76adf050740f67c84402d0812b6c67b4","modified":1688717136420},{"_id":"public/tags/index.html","hash":"47766aaf362127ecfb042acf45e767ddf3bbc5db","modified":1688717136420},{"_id":"public/img/node/performance.memory.webp","hash":"aec46e4074f9e4c173bf287036c0af9c0a961e8f","modified":1688717136420},{"_id":"public/img/node/performance.requests.webp","hash":"ca2282779e7d4e10460558b7658012056b642846","modified":1688717136420},{"_id":"public/img/node/nodejs-nio.webp","hash":"c591753488cf827cfe4c7bb1267053d1506181aa","modified":1688717136420},{"_id":"public/img/node/performance.cpu.webp","hash":"d53acd1120be4bb09fcb5d13acffc993dfd98d29","modified":1688717136420},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1688717136420},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1688717136420},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1688717136420},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1688717136420},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1688717136420},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1688717136420},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1688717136420},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1688717136420},{"_id":"public/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1688717136420},{"_id":"public/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1688717136420},{"_id":"public/css/cyberpunk.css","hash":"b462177bee11f76e84e649f8192d5a68cb4b1402","modified":1688717136420},{"_id":"public/css/default.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1688717136420},{"_id":"public/css/style.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1688717136420}],"Category":[{"name":"测试","_id":"cljsakz8l00021a1i9mca27v0"},{"name":"前端","_id":"cljsakz8o00061a1ib1bo22bq"}],"Data":[],"Page":[],"Post":[{"title":"前端自动化测试的挑战和应对","date":"2023-03-16T06:48:17.000Z","toc":true,"_content":"\n<!-- toc -->\n\n前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：\n\n- 前端界面变更频繁，导致测试用例失效或难以维护\n- 前端界面涉及多种元素和交互，导致测试用例复杂或不稳定\n- 前端界面需要适配多种浏览器和设备，导致测试用例覆盖不全或执行缓慢\n\n针对这些挑战，有以下一些建议：\n\n<!--more-->\n\n- 选择合适的自动化测试框架。前端自动化的流派主要分为三类：基于录制回放技术的自动化测试框架，基于对文档对象模型 (DOM）对象进行解析的自动化测试框架，以及基于图像识别的自动化测试框架。每种框架都有其优缺点和适用场景，需要根据项目的特点和需求进行选择。\n- 优先进行单元测试和服务测试。前端项目通常UI变化频繁，一旦发生变化，UI测试用例就无法执行且难以维护，所以UI自动化测试的成本高，收益小；相比UI测试，Service测试更加简单直接且变化不会很频繁；单元测试主要对公共函数、方法进行测试，测试用例复用度高且更能保证代码质量。因此，在进行前端自动化测试时，应该优先考虑单元测试和服务测试，并尽量覆盖所有可能出现的情况。\n- 使用云测平台或容器技术。为了解决前端界面需要适配多种浏览器和设备的问题，可以使用云测平台或容器技术来提供多样化的环境和资源，并实现并行执行、实时监控、远程调试等功能。这样可以节省本地资源、提高执行速度、增强可靠性。\n\n那么如何编写高质量的前端自动化测试用例呢？\n\n编写高质量的前端自动化用例是一项重要的技能，它可以帮助你更有效地验证前端功能和界面，发现并修复缺陷，提升软件质量。根据网上的搜索结果。\n以下是一些编写高质量的前端自动化用例的原则和规范：\n\n- 针对稳定且重要的业务基础代码编写测试用例，比如通用组件、通用算法和数据模块等，避免频繁变更的UI元素和交互。\n- 遵循测试用例编写的统一格式，包括测试编号、测试标题、测试目标、测试步骤、预期结果、实际结果等，并使用清晰明确的语言描述。\n- 设计合理且完备的测试数据，覆盖正常情况和异常情况，并尽量使用真实或接近真实的数据。\n- 采用模块化和参数化的方式编写测试用例，提高复用性和可维护性，并避免硬编码和冗余代码。\n- 使用断言或检查点来验证预期结果是否与实际结果一致，并在出现错误时及时报告并记录日志。\n- 定期执行回归测试，并根据产品需求或代码变更及时更新或删除无效或过时的测试用例。\n\n自动化测试工具：\n\n前端自动化测试工具有很多种，根据网上的搜索结果，我为你总结了以下一些常用的前端自动化测试工具：\n\n- Karma：一个测试运行平台，可以在多个真实浏览器中运行测试用例，并提供实时反馈。它可以集成多种测试框架（如Jasmine、Mocha等）和断言库（如Chai、Sinon等），并支持代码覆盖率报告和持续集成。\n- Jest：一个基于Jasmine的JavaScript测试框架，可以对React、Vue等前端框架进行单元测试和快照测试。它内置了断言库、模拟库、代码覆盖率工具等功能，并提供了简洁的API和快速的执行速度。\n- Selenium：一个用于Web应用程序自动化测试的工具，可以模拟用户在浏览器中的操作，并验证预期结果。它支持多种编程语言（如Java、Python、Ruby等）和浏览器（如Chrome、Firefox、IE等），并提供了WebDriver API和IDE插件。\n- Cypress：一个全新的前端自动化测试框架，可以对Web应用程序进行端到端的集成测试。它不需要依赖Selenium或其他外部服务，而是直接运行在浏览器中，并提供了丰富的API和图形界面。","source":"_posts/fe-auto-testing.md","raw":"---\ntitle: 前端自动化测试的挑战和应对\ndate: 2023-03-16 14:48:17\ntoc: true\ntags: \n    - 测试\ncategories:\n    - 测试\n---\n\n<!-- toc -->\n\n前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：\n\n- 前端界面变更频繁，导致测试用例失效或难以维护\n- 前端界面涉及多种元素和交互，导致测试用例复杂或不稳定\n- 前端界面需要适配多种浏览器和设备，导致测试用例覆盖不全或执行缓慢\n\n针对这些挑战，有以下一些建议：\n\n<!--more-->\n\n- 选择合适的自动化测试框架。前端自动化的流派主要分为三类：基于录制回放技术的自动化测试框架，基于对文档对象模型 (DOM）对象进行解析的自动化测试框架，以及基于图像识别的自动化测试框架。每种框架都有其优缺点和适用场景，需要根据项目的特点和需求进行选择。\n- 优先进行单元测试和服务测试。前端项目通常UI变化频繁，一旦发生变化，UI测试用例就无法执行且难以维护，所以UI自动化测试的成本高，收益小；相比UI测试，Service测试更加简单直接且变化不会很频繁；单元测试主要对公共函数、方法进行测试，测试用例复用度高且更能保证代码质量。因此，在进行前端自动化测试时，应该优先考虑单元测试和服务测试，并尽量覆盖所有可能出现的情况。\n- 使用云测平台或容器技术。为了解决前端界面需要适配多种浏览器和设备的问题，可以使用云测平台或容器技术来提供多样化的环境和资源，并实现并行执行、实时监控、远程调试等功能。这样可以节省本地资源、提高执行速度、增强可靠性。\n\n那么如何编写高质量的前端自动化测试用例呢？\n\n编写高质量的前端自动化用例是一项重要的技能，它可以帮助你更有效地验证前端功能和界面，发现并修复缺陷，提升软件质量。根据网上的搜索结果。\n以下是一些编写高质量的前端自动化用例的原则和规范：\n\n- 针对稳定且重要的业务基础代码编写测试用例，比如通用组件、通用算法和数据模块等，避免频繁变更的UI元素和交互。\n- 遵循测试用例编写的统一格式，包括测试编号、测试标题、测试目标、测试步骤、预期结果、实际结果等，并使用清晰明确的语言描述。\n- 设计合理且完备的测试数据，覆盖正常情况和异常情况，并尽量使用真实或接近真实的数据。\n- 采用模块化和参数化的方式编写测试用例，提高复用性和可维护性，并避免硬编码和冗余代码。\n- 使用断言或检查点来验证预期结果是否与实际结果一致，并在出现错误时及时报告并记录日志。\n- 定期执行回归测试，并根据产品需求或代码变更及时更新或删除无效或过时的测试用例。\n\n自动化测试工具：\n\n前端自动化测试工具有很多种，根据网上的搜索结果，我为你总结了以下一些常用的前端自动化测试工具：\n\n- Karma：一个测试运行平台，可以在多个真实浏览器中运行测试用例，并提供实时反馈。它可以集成多种测试框架（如Jasmine、Mocha等）和断言库（如Chai、Sinon等），并支持代码覆盖率报告和持续集成。\n- Jest：一个基于Jasmine的JavaScript测试框架，可以对React、Vue等前端框架进行单元测试和快照测试。它内置了断言库、模拟库、代码覆盖率工具等功能，并提供了简洁的API和快速的执行速度。\n- Selenium：一个用于Web应用程序自动化测试的工具，可以模拟用户在浏览器中的操作，并验证预期结果。它支持多种编程语言（如Java、Python、Ruby等）和浏览器（如Chrome、Firefox、IE等），并提供了WebDriver API和IDE插件。\n- Cypress：一个全新的前端自动化测试框架，可以对Web应用程序进行端到端的集成测试。它不需要依赖Selenium或其他外部服务，而是直接运行在浏览器中，并提供了丰富的API和图形界面。","slug":"fe-auto-testing","published":1,"updated":"2023-07-07T07:57:02.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsakz8f00001a1i8ggehng2","content":"<!-- toc -->\n\n<p>前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：</p>\n<ul>\n<li>前端界面变更频繁，导致测试用例失效或难以维护</li>\n<li>前端界面涉及多种元素和交互，导致测试用例复杂或不稳定</li>\n<li>前端界面需要适配多种浏览器和设备，导致测试用例覆盖不全或执行缓慢</li>\n</ul>\n<p>针对这些挑战，有以下一些建议：</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>选择合适的自动化测试框架。前端自动化的流派主要分为三类：基于录制回放技术的自动化测试框架，基于对文档对象模型 (DOM）对象进行解析的自动化测试框架，以及基于图像识别的自动化测试框架。每种框架都有其优缺点和适用场景，需要根据项目的特点和需求进行选择。</li>\n<li>优先进行单元测试和服务测试。前端项目通常UI变化频繁，一旦发生变化，UI测试用例就无法执行且难以维护，所以UI自动化测试的成本高，收益小；相比UI测试，Service测试更加简单直接且变化不会很频繁；单元测试主要对公共函数、方法进行测试，测试用例复用度高且更能保证代码质量。因此，在进行前端自动化测试时，应该优先考虑单元测试和服务测试，并尽量覆盖所有可能出现的情况。</li>\n<li>使用云测平台或容器技术。为了解决前端界面需要适配多种浏览器和设备的问题，可以使用云测平台或容器技术来提供多样化的环境和资源，并实现并行执行、实时监控、远程调试等功能。这样可以节省本地资源、提高执行速度、增强可靠性。</li>\n</ul>\n<p>那么如何编写高质量的前端自动化测试用例呢？</p>\n<p>编写高质量的前端自动化用例是一项重要的技能，它可以帮助你更有效地验证前端功能和界面，发现并修复缺陷，提升软件质量。根据网上的搜索结果。<br>以下是一些编写高质量的前端自动化用例的原则和规范：</p>\n<ul>\n<li>针对稳定且重要的业务基础代码编写测试用例，比如通用组件、通用算法和数据模块等，避免频繁变更的UI元素和交互。</li>\n<li>遵循测试用例编写的统一格式，包括测试编号、测试标题、测试目标、测试步骤、预期结果、实际结果等，并使用清晰明确的语言描述。</li>\n<li>设计合理且完备的测试数据，覆盖正常情况和异常情况，并尽量使用真实或接近真实的数据。</li>\n<li>采用模块化和参数化的方式编写测试用例，提高复用性和可维护性，并避免硬编码和冗余代码。</li>\n<li>使用断言或检查点来验证预期结果是否与实际结果一致，并在出现错误时及时报告并记录日志。</li>\n<li>定期执行回归测试，并根据产品需求或代码变更及时更新或删除无效或过时的测试用例。</li>\n</ul>\n<p>自动化测试工具：</p>\n<p>前端自动化测试工具有很多种，根据网上的搜索结果，我为你总结了以下一些常用的前端自动化测试工具：</p>\n<ul>\n<li>Karma：一个测试运行平台，可以在多个真实浏览器中运行测试用例，并提供实时反馈。它可以集成多种测试框架（如Jasmine、Mocha等）和断言库（如Chai、Sinon等），并支持代码覆盖率报告和持续集成。</li>\n<li>Jest：一个基于Jasmine的JavaScript测试框架，可以对React、Vue等前端框架进行单元测试和快照测试。它内置了断言库、模拟库、代码覆盖率工具等功能，并提供了简洁的API和快速的执行速度。</li>\n<li>Selenium：一个用于Web应用程序自动化测试的工具，可以模拟用户在浏览器中的操作，并验证预期结果。它支持多种编程语言（如Java、Python、Ruby等）和浏览器（如Chrome、Firefox、IE等），并提供了WebDriver API和IDE插件。</li>\n<li>Cypress：一个全新的前端自动化测试框架，可以对Web应用程序进行端到端的集成测试。它不需要依赖Selenium或其他外部服务，而是直接运行在浏览器中，并提供了丰富的API和图形界面。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<!-- toc -->\n\n<p>前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：</p>\n<ul>\n<li>前端界面变更频繁，导致测试用例失效或难以维护</li>\n<li>前端界面涉及多种元素和交互，导致测试用例复杂或不稳定</li>\n<li>前端界面需要适配多种浏览器和设备，导致测试用例覆盖不全或执行缓慢</li>\n</ul>\n<p>针对这些挑战，有以下一些建议：</p>","more":"<ul>\n<li>选择合适的自动化测试框架。前端自动化的流派主要分为三类：基于录制回放技术的自动化测试框架，基于对文档对象模型 (DOM）对象进行解析的自动化测试框架，以及基于图像识别的自动化测试框架。每种框架都有其优缺点和适用场景，需要根据项目的特点和需求进行选择。</li>\n<li>优先进行单元测试和服务测试。前端项目通常UI变化频繁，一旦发生变化，UI测试用例就无法执行且难以维护，所以UI自动化测试的成本高，收益小；相比UI测试，Service测试更加简单直接且变化不会很频繁；单元测试主要对公共函数、方法进行测试，测试用例复用度高且更能保证代码质量。因此，在进行前端自动化测试时，应该优先考虑单元测试和服务测试，并尽量覆盖所有可能出现的情况。</li>\n<li>使用云测平台或容器技术。为了解决前端界面需要适配多种浏览器和设备的问题，可以使用云测平台或容器技术来提供多样化的环境和资源，并实现并行执行、实时监控、远程调试等功能。这样可以节省本地资源、提高执行速度、增强可靠性。</li>\n</ul>\n<p>那么如何编写高质量的前端自动化测试用例呢？</p>\n<p>编写高质量的前端自动化用例是一项重要的技能，它可以帮助你更有效地验证前端功能和界面，发现并修复缺陷，提升软件质量。根据网上的搜索结果。<br>以下是一些编写高质量的前端自动化用例的原则和规范：</p>\n<ul>\n<li>针对稳定且重要的业务基础代码编写测试用例，比如通用组件、通用算法和数据模块等，避免频繁变更的UI元素和交互。</li>\n<li>遵循测试用例编写的统一格式，包括测试编号、测试标题、测试目标、测试步骤、预期结果、实际结果等，并使用清晰明确的语言描述。</li>\n<li>设计合理且完备的测试数据，覆盖正常情况和异常情况，并尽量使用真实或接近真实的数据。</li>\n<li>采用模块化和参数化的方式编写测试用例，提高复用性和可维护性，并避免硬编码和冗余代码。</li>\n<li>使用断言或检查点来验证预期结果是否与实际结果一致，并在出现错误时及时报告并记录日志。</li>\n<li>定期执行回归测试，并根据产品需求或代码变更及时更新或删除无效或过时的测试用例。</li>\n</ul>\n<p>自动化测试工具：</p>\n<p>前端自动化测试工具有很多种，根据网上的搜索结果，我为你总结了以下一些常用的前端自动化测试工具：</p>\n<ul>\n<li>Karma：一个测试运行平台，可以在多个真实浏览器中运行测试用例，并提供实时反馈。它可以集成多种测试框架（如Jasmine、Mocha等）和断言库（如Chai、Sinon等），并支持代码覆盖率报告和持续集成。</li>\n<li>Jest：一个基于Jasmine的JavaScript测试框架，可以对React、Vue等前端框架进行单元测试和快照测试。它内置了断言库、模拟库、代码覆盖率工具等功能，并提供了简洁的API和快速的执行速度。</li>\n<li>Selenium：一个用于Web应用程序自动化测试的工具，可以模拟用户在浏览器中的操作，并验证预期结果。它支持多种编程语言（如Java、Python、Ruby等）和浏览器（如Chrome、Firefox、IE等），并提供了WebDriver API和IDE插件。</li>\n<li>Cypress：一个全新的前端自动化测试框架，可以对Web应用程序进行端到端的集成测试。它不需要依赖Selenium或其他外部服务，而是直接运行在浏览器中，并提供了丰富的API和图形界面。</li>\n</ul>"},{"title":"React Hooks","date":"2023-03-16T08:45:17.000Z","toc":true,"_content":"\nReactjs是一个用于构建用户界面的JavaScript库，它提供了一种称为Hooks的特性，让你可以在函数组件中使用状态和其他React特性，而不需要写类组件。\n\n## Reactjs提供了以下几种Hooks\n\n### `useState`\n\n- `useState`: 用于在函数组件中添加状态。它返回一个状态变量和一个更新该变量的函数。你可以在组件中多次使用`useState`来定义多个状态变量。\n\n### `useEffect`\n\n- `useEffect`: 用于在函数组件中执行副作用，如数据获取、订阅、定时器等。它接受一个函数作为参数，该函数会在每次渲染后执行。你可以在组件中多次使用`useEffect`来定义多个副作用。\n\n### `useContext`\n\n- `useContext`：用于在函数组件中访问React的上下文。它接受一个上下文对象作为参数，并返回该上下文的当前值。你可以使用`useContext`来避免通过多层组件传递props。\n\n<!--more-->\n\n### `useReducer`\n\n- `useReducer`：用于在函数组件中管理复杂的状态逻辑。它接受一个reducer函数和一个初始状态作为参数，并返回一个当前状态和一个分发action的函数。你可以使用`useReducer`来替代`useState`，当你的状态逻辑包含多个子值或者依赖于之前的状态时。\n\n### `useCallback`\n\n- `useCallback`：用于在函数组件中缓存函数。它接受一个内联函数和一个依赖数组作为参数，并返回该函数的缓存版本。你可以使用`useCallback`来避免不必要的重新渲染，当你把函数作为props传递给子组件时。\n\n### `useMemo`\n\n- `useMemo`：用于在函数组件中缓存计算结果。它接受一个创建值的函数和一个依赖数组作为参数，并返回该值的缓存版本。你可以使用`useMemo`来避免重复计算，当你的计算结果依赖于一些变化较少的值时。\n\n### `useRef`\n\n- `useRef`: 用于在函数组件中创建可变的引用对象。它接受一个初始值作为参数，并返回一个包含当前值属性（`.current`) 的对象。你可以使用\n  `useRef`\n  来保存任何可变值，而不会触发重新渲染，例如DOM元素、定时器ID等。\n\n### `useImperativeHandle`\n\n- `useImperativeHandle`: 用于在自定义Hook中自定义暴露给父组件的ref对象。它接受一个ref对象和一个创建ref对象当前值属性（`.current`) 的回调函数作为参数，并将回调函数返回\n  的结果分配给ref对象当前值属性（`.current`) 。你可以使用\n  `useImperativeHandle`\n  来控制父组件通过ref访问子组件实例时能够访问到什么内容。\n\n### `useLayoutEffect`\n\n- `useLayoutEffect`: 与\n  `useEffect`\n  类似，但是会在所有DOM更改之后同步执行副作用回调，在浏览器绘制之前执行回调，在大多数情况下应该优先使用\n  `useEffect`\n  ，除非需要从DOM读取布局并同步触发更新，在这种情况下应该使用\n  `useLayoutEffect`\n\n### `useDebugValue`\n\n- `useDebugValue`: 可以被自定义Hook开发者使用，在 React DevTools 中显示自定义hook标签。\n\n好的，我可以给你一些使用Hooks的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²或者其他可靠的资源。\n\n## 以下是一些使用Hooks的示例代码\n\n### `useState`\n\n```js\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  // 定义一个名为count的状态变量，初始值为0\n  const [count, setCount] = useState(0);\n\n  // 定义一个函数，用于增加count的值\n  function increment() {\n    setCount(count + 1);\n  }\n\n  // 定义一个函数，用于减少count的值\n  function decrement() {\n    setCount(count - 1);\n  }\n\n  // 返回一个JSX元素，显示count的值和两个按钮\n  return (\n    <div>\n      <p>当前计数：{count}</p>\n      <button onClick={increment}>+1</button>\n      <button onClick={decrement}>-1</button>\n    </div>\n  );\n}\n```\n\n### `useEffect`\n\n```js\nimport React, { useEffect, useState } from \"react\";\n\nfunction Clock() {\n  // 定义一个名为time的状态变量，初始值为当前时间\n  const [time, setTime] = useState(new Date());\n\n  // 使用useEffect定义一个副作用，每隔一秒更新time的值\n  useEffect(() => {\n    // 创建一个定时器ID\n    const timerID = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    // 返回一个清理函数，在组件卸载时取消定时器\n    return () => {\n      clearInterval(timerID);\n    };\n  }, []); // 空数组表示只在组件挂载时执行一次\n\n  // 返回一个JSX元素，显示当前时间\n  return <p>现在是：{time.toLocaleTimeString()}</p>;\n}\n```\n\n### `useReducer`\n\n```js\nimport React, { useReducer } from \"react\";\n\n// 定义一个reducer函数，根据action的类型更新state\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  // 使用useReducer定义一个名为state的状态变量和一个名为dispatch的函数，初始值为{count:0}\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  // 返回一个JSX元素，显示state.count的值和两个按钮\n  return (\n    <div>\n      <p>当前计数：{state.count}</p>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+1</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-1</button>\n    </div>\n  );\n}\n```\n\n好的，我可以再给你一些useCallback和useContext的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²³或者其他可靠的资源。\n\n以下是一些useCallback和useContext的示例代码：\n\n### `useCallback`\n\n```js\nimport React, { useCallback, useState } from \"react\";\n\nfunction Child({ increment }) {\n  // 返回一个JSX元素，显示一个按钮\n  return <button onClick={increment}>+1</button>;\n}\n\nfunction Parent() {\n  // 定义一个名为count的状态变量，初始值为0\n  const [count, setCount] = useState(0);\n\n  // 使用useCallback定义一个函数，用于增加count的值，并将count作为依赖项\n  const increment = useCallback(() => {\n    setCount((prevCount) => prevCount + 1);\n  }, [count]);\n\n  // 返回一个JSX元素，显示count的值和Child组件\n  return (\n    <div>\n      <p>当前计数：{count}</p>\n      <Child increment={increment} />\n    </div>\n  );\n}\n```\n\n### `useContext`\n\n```js\nimport React, { useContext } from \"react\";\n\n// 创建一个名为ThemeContext的上下文对象，并设置默认值为light\nconst ThemeContext = React.createContext(\"light\");\n\nfunction App() {\n  // 定义一个名为theme的状态变量，初始值为dark\n  const [theme, setTheme] = React.useState(\"dark\");\n\n  // 定义一个函数，用于切换theme的值\n  function toggleTheme() {\n    setTheme((prevTheme) => (prevTheme === \"dark\" ? \"light\" : \"dark\"));\n  }\n\n  // 返回一个JSX元素，使用ThemeContext.Provider包裹子组件，并传递theme作为value属性\n  return (\n    <ThemeContext.Provider value={theme}>\n      <div>\n        <p>当前主题：{theme}</p>\n        <button onClick={toggleTheme}>切换主题</button>\n        <Toolbar />\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Toolbar() {\n```\n","source":"_posts/react-hooks.md","raw":"---\ntitle: React Hooks\ndate: 2023-03-16 16:45:17\ntoc: true\ntags: \n    - react.js\n    - 前端\ncategories:\n    - 前端\n---\n\nReactjs是一个用于构建用户界面的JavaScript库，它提供了一种称为Hooks的特性，让你可以在函数组件中使用状态和其他React特性，而不需要写类组件。\n\n## Reactjs提供了以下几种Hooks\n\n### `useState`\n\n- `useState`: 用于在函数组件中添加状态。它返回一个状态变量和一个更新该变量的函数。你可以在组件中多次使用`useState`来定义多个状态变量。\n\n### `useEffect`\n\n- `useEffect`: 用于在函数组件中执行副作用，如数据获取、订阅、定时器等。它接受一个函数作为参数，该函数会在每次渲染后执行。你可以在组件中多次使用`useEffect`来定义多个副作用。\n\n### `useContext`\n\n- `useContext`：用于在函数组件中访问React的上下文。它接受一个上下文对象作为参数，并返回该上下文的当前值。你可以使用`useContext`来避免通过多层组件传递props。\n\n<!--more-->\n\n### `useReducer`\n\n- `useReducer`：用于在函数组件中管理复杂的状态逻辑。它接受一个reducer函数和一个初始状态作为参数，并返回一个当前状态和一个分发action的函数。你可以使用`useReducer`来替代`useState`，当你的状态逻辑包含多个子值或者依赖于之前的状态时。\n\n### `useCallback`\n\n- `useCallback`：用于在函数组件中缓存函数。它接受一个内联函数和一个依赖数组作为参数，并返回该函数的缓存版本。你可以使用`useCallback`来避免不必要的重新渲染，当你把函数作为props传递给子组件时。\n\n### `useMemo`\n\n- `useMemo`：用于在函数组件中缓存计算结果。它接受一个创建值的函数和一个依赖数组作为参数，并返回该值的缓存版本。你可以使用`useMemo`来避免重复计算，当你的计算结果依赖于一些变化较少的值时。\n\n### `useRef`\n\n- `useRef`: 用于在函数组件中创建可变的引用对象。它接受一个初始值作为参数，并返回一个包含当前值属性（`.current`) 的对象。你可以使用\n  `useRef`\n  来保存任何可变值，而不会触发重新渲染，例如DOM元素、定时器ID等。\n\n### `useImperativeHandle`\n\n- `useImperativeHandle`: 用于在自定义Hook中自定义暴露给父组件的ref对象。它接受一个ref对象和一个创建ref对象当前值属性（`.current`) 的回调函数作为参数，并将回调函数返回\n  的结果分配给ref对象当前值属性（`.current`) 。你可以使用\n  `useImperativeHandle`\n  来控制父组件通过ref访问子组件实例时能够访问到什么内容。\n\n### `useLayoutEffect`\n\n- `useLayoutEffect`: 与\n  `useEffect`\n  类似，但是会在所有DOM更改之后同步执行副作用回调，在浏览器绘制之前执行回调，在大多数情况下应该优先使用\n  `useEffect`\n  ，除非需要从DOM读取布局并同步触发更新，在这种情况下应该使用\n  `useLayoutEffect`\n\n### `useDebugValue`\n\n- `useDebugValue`: 可以被自定义Hook开发者使用，在 React DevTools 中显示自定义hook标签。\n\n好的，我可以给你一些使用Hooks的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²或者其他可靠的资源。\n\n## 以下是一些使用Hooks的示例代码\n\n### `useState`\n\n```js\nimport React, { useState } from \"react\";\n\nfunction Counter() {\n  // 定义一个名为count的状态变量，初始值为0\n  const [count, setCount] = useState(0);\n\n  // 定义一个函数，用于增加count的值\n  function increment() {\n    setCount(count + 1);\n  }\n\n  // 定义一个函数，用于减少count的值\n  function decrement() {\n    setCount(count - 1);\n  }\n\n  // 返回一个JSX元素，显示count的值和两个按钮\n  return (\n    <div>\n      <p>当前计数：{count}</p>\n      <button onClick={increment}>+1</button>\n      <button onClick={decrement}>-1</button>\n    </div>\n  );\n}\n```\n\n### `useEffect`\n\n```js\nimport React, { useEffect, useState } from \"react\";\n\nfunction Clock() {\n  // 定义一个名为time的状态变量，初始值为当前时间\n  const [time, setTime] = useState(new Date());\n\n  // 使用useEffect定义一个副作用，每隔一秒更新time的值\n  useEffect(() => {\n    // 创建一个定时器ID\n    const timerID = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    // 返回一个清理函数，在组件卸载时取消定时器\n    return () => {\n      clearInterval(timerID);\n    };\n  }, []); // 空数组表示只在组件挂载时执行一次\n\n  // 返回一个JSX元素，显示当前时间\n  return <p>现在是：{time.toLocaleTimeString()}</p>;\n}\n```\n\n### `useReducer`\n\n```js\nimport React, { useReducer } from \"react\";\n\n// 定义一个reducer函数，根据action的类型更新state\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  // 使用useReducer定义一个名为state的状态变量和一个名为dispatch的函数，初始值为{count:0}\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  // 返回一个JSX元素，显示state.count的值和两个按钮\n  return (\n    <div>\n      <p>当前计数：{state.count}</p>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+1</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-1</button>\n    </div>\n  );\n}\n```\n\n好的，我可以再给你一些useCallback和useContext的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²³或者其他可靠的资源。\n\n以下是一些useCallback和useContext的示例代码：\n\n### `useCallback`\n\n```js\nimport React, { useCallback, useState } from \"react\";\n\nfunction Child({ increment }) {\n  // 返回一个JSX元素，显示一个按钮\n  return <button onClick={increment}>+1</button>;\n}\n\nfunction Parent() {\n  // 定义一个名为count的状态变量，初始值为0\n  const [count, setCount] = useState(0);\n\n  // 使用useCallback定义一个函数，用于增加count的值，并将count作为依赖项\n  const increment = useCallback(() => {\n    setCount((prevCount) => prevCount + 1);\n  }, [count]);\n\n  // 返回一个JSX元素，显示count的值和Child组件\n  return (\n    <div>\n      <p>当前计数：{count}</p>\n      <Child increment={increment} />\n    </div>\n  );\n}\n```\n\n### `useContext`\n\n```js\nimport React, { useContext } from \"react\";\n\n// 创建一个名为ThemeContext的上下文对象，并设置默认值为light\nconst ThemeContext = React.createContext(\"light\");\n\nfunction App() {\n  // 定义一个名为theme的状态变量，初始值为dark\n  const [theme, setTheme] = React.useState(\"dark\");\n\n  // 定义一个函数，用于切换theme的值\n  function toggleTheme() {\n    setTheme((prevTheme) => (prevTheme === \"dark\" ? \"light\" : \"dark\"));\n  }\n\n  // 返回一个JSX元素，使用ThemeContext.Provider包裹子组件，并传递theme作为value属性\n  return (\n    <ThemeContext.Provider value={theme}>\n      <div>\n        <p>当前主题：{theme}</p>\n        <button onClick={toggleTheme}>切换主题</button>\n        <Toolbar />\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Toolbar() {\n```\n","slug":"react-hooks","published":1,"updated":"2023-07-07T07:57:47.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsakz8j00011a1ib9g49kz2","content":"<p>Reactjs是一个用于构建用户界面的JavaScript库，它提供了一种称为Hooks的特性，让你可以在函数组件中使用状态和其他React特性，而不需要写类组件。</p>\n<h2 id=\"Reactjs提供了以下几种Hooks\"><a href=\"#Reactjs提供了以下几种Hooks\" class=\"headerlink\" title=\"Reactjs提供了以下几种Hooks\"></a>Reactjs提供了以下几种Hooks</h2><h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a><code>useState</code></h3><ul>\n<li><code>useState</code>: 用于在函数组件中添加状态。它返回一个状态变量和一个更新该变量的函数。你可以在组件中多次使用<code>useState</code>来定义多个状态变量。</li>\n</ul>\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a><code>useEffect</code></h3><ul>\n<li><code>useEffect</code>: 用于在函数组件中执行副作用，如数据获取、订阅、定时器等。它接受一个函数作为参数，该函数会在每次渲染后执行。你可以在组件中多次使用<code>useEffect</code>来定义多个副作用。</li>\n</ul>\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a><code>useContext</code></h3><ul>\n<li><code>useContext</code>：用于在函数组件中访问React的上下文。它接受一个上下文对象作为参数，并返回该上下文的当前值。你可以使用<code>useContext</code>来避免通过多层组件传递props。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a><code>useReducer</code></h3><ul>\n<li><code>useReducer</code>：用于在函数组件中管理复杂的状态逻辑。它接受一个reducer函数和一个初始状态作为参数，并返回一个当前状态和一个分发action的函数。你可以使用<code>useReducer</code>来替代<code>useState</code>，当你的状态逻辑包含多个子值或者依赖于之前的状态时。</li>\n</ul>\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a><code>useCallback</code></h3><ul>\n<li><code>useCallback</code>：用于在函数组件中缓存函数。它接受一个内联函数和一个依赖数组作为参数，并返回该函数的缓存版本。你可以使用<code>useCallback</code>来避免不必要的重新渲染，当你把函数作为props传递给子组件时。</li>\n</ul>\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a><code>useMemo</code></h3><ul>\n<li><code>useMemo</code>：用于在函数组件中缓存计算结果。它接受一个创建值的函数和一个依赖数组作为参数，并返回该值的缓存版本。你可以使用<code>useMemo</code>来避免重复计算，当你的计算结果依赖于一些变化较少的值时。</li>\n</ul>\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a><code>useRef</code></h3><ul>\n<li><code>useRef</code>: 用于在函数组件中创建可变的引用对象。它接受一个初始值作为参数，并返回一个包含当前值属性（<code>.current</code>) 的对象。你可以使用<br><code>useRef</code><br>来保存任何可变值，而不会触发重新渲染，例如DOM元素、定时器ID等。</li>\n</ul>\n<h3 id=\"useImperativeHandle\"><a href=\"#useImperativeHandle\" class=\"headerlink\" title=\"useImperativeHandle\"></a><code>useImperativeHandle</code></h3><ul>\n<li><code>useImperativeHandle</code>: 用于在自定义Hook中自定义暴露给父组件的ref对象。它接受一个ref对象和一个创建ref对象当前值属性（<code>.current</code>) 的回调函数作为参数，并将回调函数返回<br>的结果分配给ref对象当前值属性（<code>.current</code>) 。你可以使用<br><code>useImperativeHandle</code><br>来控制父组件通过ref访问子组件实例时能够访问到什么内容。</li>\n</ul>\n<h3 id=\"useLayoutEffect\"><a href=\"#useLayoutEffect\" class=\"headerlink\" title=\"useLayoutEffect\"></a><code>useLayoutEffect</code></h3><ul>\n<li><code>useLayoutEffect</code>: 与<br><code>useEffect</code><br>类似，但是会在所有DOM更改之后同步执行副作用回调，在浏览器绘制之前执行回调，在大多数情况下应该优先使用<br><code>useEffect</code><br>，除非需要从DOM读取布局并同步触发更新，在这种情况下应该使用<br><code>useLayoutEffect</code></li>\n</ul>\n<h3 id=\"useDebugValue\"><a href=\"#useDebugValue\" class=\"headerlink\" title=\"useDebugValue\"></a><code>useDebugValue</code></h3><ul>\n<li><code>useDebugValue</code>: 可以被自定义Hook开发者使用，在 React DevTools 中显示自定义hook标签。</li>\n</ul>\n<p>好的，我可以给你一些使用Hooks的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²或者其他可靠的资源。</p>\n<h2 id=\"以下是一些使用Hooks的示例代码\"><a href=\"#以下是一些使用Hooks的示例代码\" class=\"headerlink\" title=\"以下是一些使用Hooks的示例代码\"></a>以下是一些使用Hooks的示例代码</h2><h3 id=\"useState-1\"><a href=\"#useState-1\" class=\"headerlink\" title=\"useState\"></a><code>useState</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Counter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个名为count的状态变量，初始值为0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个函数，用于增加count的值</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个函数，用于减少count的值</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">decrement</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(count - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示count的值和两个按钮</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前计数：&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;decrement&#125;</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect-1\"><a href=\"#useEffect-1\" class=\"headerlink\" title=\"useEffect\"></a><code>useEffect</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Clock</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个名为time的状态变量，初始值为当前时间</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [time, setTime] = <span class=\"title function_\">useState</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用useEffect定义一个副作用，每隔一秒更新time的值</span></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个定时器ID</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timerID = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setTime</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个清理函数，在组件卸载时取消定时器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(timerID);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []); <span class=\"comment\">// 空数组表示只在组件挂载时执行一次</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示当前时间</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>现在是：&#123;time.toLocaleTimeString()&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useReducer-1\"><a href=\"#useReducer-1\" class=\"headerlink\" title=\"useReducer\"></a><code>useReducer</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个reducer函数，根据action的类型更新state</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;increment&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;decrement&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Counter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用useReducer定义一个名为state的状态变量和一个名为dispatch的函数，初始值为&#123;count:0&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示state.count的值和两个按钮</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前计数：&#123;state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好的，我可以再给你一些useCallback和useContext的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²³或者其他可靠的资源。</p>\n<p>以下是一些useCallback和useContext的示例代码：</p>\n<h3 id=\"useCallback-1\"><a href=\"#useCallback-1\" class=\"headerlink\" title=\"useCallback\"></a><code>useCallback</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useCallback, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\">&#123; increment &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示一个按钮</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个名为count的状态变量，初始值为0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用useCallback定义一个函数，用于增加count的值，并将count作为依赖项</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> increment = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(<span class=\"function\">(<span class=\"params\">prevCount</span>) =&gt;</span> prevCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示count的值和Child组件</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前计数：&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">increment</span>=<span class=\"string\">&#123;increment&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useContext-1\"><a href=\"#useContext-1\" class=\"headerlink\" title=\"useContext\"></a><code>useContext</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个名为ThemeContext的上下文对象，并设置默认值为light</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>(<span class=\"string\">&quot;light&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个名为theme的状态变量，初始值为dark</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [theme, setTheme] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"string\">&quot;dark&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个函数，用于切换theme的值</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">toggleTheme</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setTheme</span>(<span class=\"function\">(<span class=\"params\">prevTheme</span>) =&gt;</span> (prevTheme === <span class=\"string\">&quot;dark&quot;</span> ? <span class=\"string\">&quot;light&quot;</span> : <span class=\"string\">&quot;dark&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，使用ThemeContext.Provider包裹子组件，并传递theme作为value属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;theme&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前主题：&#123;theme&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;toggleTheme&#125;</span>&gt;</span>切换主题<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Toolbar</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Toolbar</span>(<span class=\"params\"></span>) &#123;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Reactjs是一个用于构建用户界面的JavaScript库，它提供了一种称为Hooks的特性，让你可以在函数组件中使用状态和其他React特性，而不需要写类组件。</p>\n<h2 id=\"Reactjs提供了以下几种Hooks\"><a href=\"#Reactjs提供了以下几种Hooks\" class=\"headerlink\" title=\"Reactjs提供了以下几种Hooks\"></a>Reactjs提供了以下几种Hooks</h2><h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a><code>useState</code></h3><ul>\n<li><code>useState</code>: 用于在函数组件中添加状态。它返回一个状态变量和一个更新该变量的函数。你可以在组件中多次使用<code>useState</code>来定义多个状态变量。</li>\n</ul>\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a><code>useEffect</code></h3><ul>\n<li><code>useEffect</code>: 用于在函数组件中执行副作用，如数据获取、订阅、定时器等。它接受一个函数作为参数，该函数会在每次渲染后执行。你可以在组件中多次使用<code>useEffect</code>来定义多个副作用。</li>\n</ul>\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a><code>useContext</code></h3><ul>\n<li><code>useContext</code>：用于在函数组件中访问React的上下文。它接受一个上下文对象作为参数，并返回该上下文的当前值。你可以使用<code>useContext</code>来避免通过多层组件传递props。</li>\n</ul>","more":"<h3 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a><code>useReducer</code></h3><ul>\n<li><code>useReducer</code>：用于在函数组件中管理复杂的状态逻辑。它接受一个reducer函数和一个初始状态作为参数，并返回一个当前状态和一个分发action的函数。你可以使用<code>useReducer</code>来替代<code>useState</code>，当你的状态逻辑包含多个子值或者依赖于之前的状态时。</li>\n</ul>\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a><code>useCallback</code></h3><ul>\n<li><code>useCallback</code>：用于在函数组件中缓存函数。它接受一个内联函数和一个依赖数组作为参数，并返回该函数的缓存版本。你可以使用<code>useCallback</code>来避免不必要的重新渲染，当你把函数作为props传递给子组件时。</li>\n</ul>\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a><code>useMemo</code></h3><ul>\n<li><code>useMemo</code>：用于在函数组件中缓存计算结果。它接受一个创建值的函数和一个依赖数组作为参数，并返回该值的缓存版本。你可以使用<code>useMemo</code>来避免重复计算，当你的计算结果依赖于一些变化较少的值时。</li>\n</ul>\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a><code>useRef</code></h3><ul>\n<li><code>useRef</code>: 用于在函数组件中创建可变的引用对象。它接受一个初始值作为参数，并返回一个包含当前值属性（<code>.current</code>) 的对象。你可以使用<br><code>useRef</code><br>来保存任何可变值，而不会触发重新渲染，例如DOM元素、定时器ID等。</li>\n</ul>\n<h3 id=\"useImperativeHandle\"><a href=\"#useImperativeHandle\" class=\"headerlink\" title=\"useImperativeHandle\"></a><code>useImperativeHandle</code></h3><ul>\n<li><code>useImperativeHandle</code>: 用于在自定义Hook中自定义暴露给父组件的ref对象。它接受一个ref对象和一个创建ref对象当前值属性（<code>.current</code>) 的回调函数作为参数，并将回调函数返回<br>的结果分配给ref对象当前值属性（<code>.current</code>) 。你可以使用<br><code>useImperativeHandle</code><br>来控制父组件通过ref访问子组件实例时能够访问到什么内容。</li>\n</ul>\n<h3 id=\"useLayoutEffect\"><a href=\"#useLayoutEffect\" class=\"headerlink\" title=\"useLayoutEffect\"></a><code>useLayoutEffect</code></h3><ul>\n<li><code>useLayoutEffect</code>: 与<br><code>useEffect</code><br>类似，但是会在所有DOM更改之后同步执行副作用回调，在浏览器绘制之前执行回调，在大多数情况下应该优先使用<br><code>useEffect</code><br>，除非需要从DOM读取布局并同步触发更新，在这种情况下应该使用<br><code>useLayoutEffect</code></li>\n</ul>\n<h3 id=\"useDebugValue\"><a href=\"#useDebugValue\" class=\"headerlink\" title=\"useDebugValue\"></a><code>useDebugValue</code></h3><ul>\n<li><code>useDebugValue</code>: 可以被自定义Hook开发者使用，在 React DevTools 中显示自定义hook标签。</li>\n</ul>\n<p>好的，我可以给你一些使用Hooks的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²或者其他可靠的资源。</p>\n<h2 id=\"以下是一些使用Hooks的示例代码\"><a href=\"#以下是一些使用Hooks的示例代码\" class=\"headerlink\" title=\"以下是一些使用Hooks的示例代码\"></a>以下是一些使用Hooks的示例代码</h2><h3 id=\"useState-1\"><a href=\"#useState-1\" class=\"headerlink\" title=\"useState\"></a><code>useState</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Counter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个名为count的状态变量，初始值为0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个函数，用于增加count的值</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个函数，用于减少count的值</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">decrement</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(count - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示count的值和两个按钮</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前计数：&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;decrement&#125;</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect-1\"><a href=\"#useEffect-1\" class=\"headerlink\" title=\"useEffect\"></a><code>useEffect</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Clock</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个名为time的状态变量，初始值为当前时间</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [time, setTime] = <span class=\"title function_\">useState</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用useEffect定义一个副作用，每隔一秒更新time的值</span></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个定时器ID</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timerID = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setTime</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个清理函数，在组件卸载时取消定时器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(timerID);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []); <span class=\"comment\">// 空数组表示只在组件挂载时执行一次</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示当前时间</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>现在是：&#123;time.toLocaleTimeString()&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useReducer-1\"><a href=\"#useReducer-1\" class=\"headerlink\" title=\"useReducer\"></a><code>useReducer</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个reducer函数，根据action的类型更新state</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;increment&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;decrement&quot;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.<span class=\"property\">count</span> - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Counter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用useReducer定义一个名为state的状态变量和一个名为dispatch的函数，初始值为&#123;count:0&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示state.count的值和两个按钮</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前计数：&#123;state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好的，我可以再给你一些useCallback和useContext的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²³或者其他可靠的资源。</p>\n<p>以下是一些useCallback和useContext的示例代码：</p>\n<h3 id=\"useCallback-1\"><a href=\"#useCallback-1\" class=\"headerlink\" title=\"useCallback\"></a><code>useCallback</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useCallback, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\">&#123; increment &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示一个按钮</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个名为count的状态变量，初始值为0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用useCallback定义一个函数，用于增加count的值，并将count作为依赖项</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> increment = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCount</span>(<span class=\"function\">(<span class=\"params\">prevCount</span>) =&gt;</span> prevCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，显示count的值和Child组件</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前计数：&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">increment</span>=<span class=\"string\">&#123;increment&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useContext-1\"><a href=\"#useContext-1\" class=\"headerlink\" title=\"useContext\"></a><code>useContext</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个名为ThemeContext的上下文对象，并设置默认值为light</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ThemeContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>(<span class=\"string\">&quot;light&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个名为theme的状态变量，初始值为dark</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [theme, setTheme] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"string\">&quot;dark&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个函数，用于切换theme的值</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">toggleTheme</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setTheme</span>(<span class=\"function\">(<span class=\"params\">prevTheme</span>) =&gt;</span> (prevTheme === <span class=\"string\">&quot;dark&quot;</span> ? <span class=\"string\">&quot;light&quot;</span> : <span class=\"string\">&quot;dark&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个JSX元素，使用ThemeContext.Provider包裹子组件，并传递theme作为value属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ThemeContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;theme&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前主题：&#123;theme&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;toggleTheme&#125;</span>&gt;</span>切换主题<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Toolbar</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Toolbar</span>(<span class=\"params\"></span>) &#123;</span><br></pre></td></tr></table></figure>"},{"title":"Node.js 浅析","date":"2023-03-10T06:48:17.000Z","toc":true,"_content":"\n<!-- toc -->\n\n## 什么是 Node.js\n\n官方定义 Node.js 是一个开源的，跨平台的 Javascript 运行时环境。\n\n要理解这个定义需要从 Javascript 的前身谈起。在 2009 年 Node.js 出现之前，Javascript 只能运行在浏览器中，作为网页脚本使用。而 Node.js 的出现，使 Javascript 可以象其它编程语言一样运行在计算机上，Node.js 之于 Javascript 可以类比 JRE 之于 Java。所以 Node.js 不是一个编程语言，也不是一个 Javascript 框架，它是一整套 Javascript 的运行时环境（Runtime）。\n\n由于 Node.js 的出现，使 Javascript 彻底摆脱浏览器成为一门独立的编程语言。和其它编程语言 Python, Java, Rube 等一样，除了本身擅长前端开发以外，Javascript 也可以开发后台、GUI程序、CLI命令行工具等等。Javascript 有庞大开发者基础，所以 Node.js 的出现使基于 Javascript 的技术栈直接井喷。\n\nNode.js 的安装使用可以参考：[Node.js Tutorial](https://www.runoob.com/nodejs/nodejs-tutorial.html)\n\n<!--more-->\n\n## Node.js 的特点\n\nNode.js 本身的核心模块包括文件系统I/O、网络（HTTP、TCP、UDP、DNS、TLS/SSL等）、二进制数据流、加密算法、数据流等等。Node.js 模块的 API 形式简单，降低了编程的复杂度。\n\nNode.js 的最大特点在于它基于高性能的 Chrome V8 引擎，提供了一个单线程 NIO (非阻塞队列) 的事件驱动模型。这使它极其高效和轻量级。\n\n![](/img/node/nodejs-nio.webp)\n\n如上图所示，Node.js 的核心是一个事件驱动的单线程非阻塞 Event Loop 用来处理所有的请求（由于是单线程，所以不需要锁，避免了多线程带来的复杂性和开销），这样的设计让 Node.js 非常擅于 IO 密集型的应用，能够充分用效的利用硬件资源，从而提供更高的并发性能。\n\n## 性能对比\n\n引用：[Node.js vs Springboot: Hello world performance comparison](https://medium.com/deno-the-complete-reference/node-js-vs-springboot-hello-world-performance-comparison-59b4d461526c)\n\n传统 Spring Boot 和 Node.js 的性能对比。\n**需要说明的是这并不是一个严谨的比较，因为基于 Java 语言也有很多优秀的 NIO 模型框架，比如 Netty、以及基于 Netty 的 spring5-webflux，其提供了恐怖的并发性能。所以这个比较只是一个示例，用于说明 Node.js 在特定场景下的的优势，仅供参考。勿喷。**\n\n![](/img/node/performance.requests.webp)\n![](/img/node/performance.cpu.webp)\n![](/img/node/performance.memory.webp)\n\n## Node.js 的适用场景\n\n迄今为止 Node.js 发展出了一个庞大且完善的生态系统，提供了各种各样的第三方模块和工具，例如 Express、Koa、Nest 以及数不清的 Javascript Library。但传统的语言比如 Java 在生态方面一样非常强大。\n\n从业务角度来讲 Node.js 的最大优点是易上手、开发简单速度快，Javascript 的语言特性可以让开发者以极快的速度响应不断变化的业务场景，前后端可以用同一种语言实现代码复用。另外生态强大就意味着轮子多，文档完善，有什么需求找合适的轮子直接用，提高生产效率。所以 Node.js 在开发轻量级、快速迭代、实时交互等类型的 Web 应用程序方面是有优势的。\n\n从技术角度来讲，轻量、快速、实时的网络应用程序，例如聊天、游戏、社交等领域是 Node.js 的强项。\n\n从资源占用方面来讲，Node.js 通常可以让你用更少的代价去高效的利用资源（CPU、Memory...），以支撑更高的访问量。\n\n相反的，重量级、稳定可靠、安全保密等类型的 Web 应用程序，可能并不适合用 Node.js 来进行开发。但 Node.js 的社区也在不断发展，需要持续关注 Node.js 带来的可能性。\n","source":"_posts/nodejs-brief.md","raw":"---\ntitle: Node.js 浅析\ndate: 2023-03-10 14:48:17\ntoc: true\ntags: \n    - nodejs\n    - 前端\ncategories:\n    - 前端\n---\n\n<!-- toc -->\n\n## 什么是 Node.js\n\n官方定义 Node.js 是一个开源的，跨平台的 Javascript 运行时环境。\n\n要理解这个定义需要从 Javascript 的前身谈起。在 2009 年 Node.js 出现之前，Javascript 只能运行在浏览器中，作为网页脚本使用。而 Node.js 的出现，使 Javascript 可以象其它编程语言一样运行在计算机上，Node.js 之于 Javascript 可以类比 JRE 之于 Java。所以 Node.js 不是一个编程语言，也不是一个 Javascript 框架，它是一整套 Javascript 的运行时环境（Runtime）。\n\n由于 Node.js 的出现，使 Javascript 彻底摆脱浏览器成为一门独立的编程语言。和其它编程语言 Python, Java, Rube 等一样，除了本身擅长前端开发以外，Javascript 也可以开发后台、GUI程序、CLI命令行工具等等。Javascript 有庞大开发者基础，所以 Node.js 的出现使基于 Javascript 的技术栈直接井喷。\n\nNode.js 的安装使用可以参考：[Node.js Tutorial](https://www.runoob.com/nodejs/nodejs-tutorial.html)\n\n<!--more-->\n\n## Node.js 的特点\n\nNode.js 本身的核心模块包括文件系统I/O、网络（HTTP、TCP、UDP、DNS、TLS/SSL等）、二进制数据流、加密算法、数据流等等。Node.js 模块的 API 形式简单，降低了编程的复杂度。\n\nNode.js 的最大特点在于它基于高性能的 Chrome V8 引擎，提供了一个单线程 NIO (非阻塞队列) 的事件驱动模型。这使它极其高效和轻量级。\n\n![](/img/node/nodejs-nio.webp)\n\n如上图所示，Node.js 的核心是一个事件驱动的单线程非阻塞 Event Loop 用来处理所有的请求（由于是单线程，所以不需要锁，避免了多线程带来的复杂性和开销），这样的设计让 Node.js 非常擅于 IO 密集型的应用，能够充分用效的利用硬件资源，从而提供更高的并发性能。\n\n## 性能对比\n\n引用：[Node.js vs Springboot: Hello world performance comparison](https://medium.com/deno-the-complete-reference/node-js-vs-springboot-hello-world-performance-comparison-59b4d461526c)\n\n传统 Spring Boot 和 Node.js 的性能对比。\n**需要说明的是这并不是一个严谨的比较，因为基于 Java 语言也有很多优秀的 NIO 模型框架，比如 Netty、以及基于 Netty 的 spring5-webflux，其提供了恐怖的并发性能。所以这个比较只是一个示例，用于说明 Node.js 在特定场景下的的优势，仅供参考。勿喷。**\n\n![](/img/node/performance.requests.webp)\n![](/img/node/performance.cpu.webp)\n![](/img/node/performance.memory.webp)\n\n## Node.js 的适用场景\n\n迄今为止 Node.js 发展出了一个庞大且完善的生态系统，提供了各种各样的第三方模块和工具，例如 Express、Koa、Nest 以及数不清的 Javascript Library。但传统的语言比如 Java 在生态方面一样非常强大。\n\n从业务角度来讲 Node.js 的最大优点是易上手、开发简单速度快，Javascript 的语言特性可以让开发者以极快的速度响应不断变化的业务场景，前后端可以用同一种语言实现代码复用。另外生态强大就意味着轮子多，文档完善，有什么需求找合适的轮子直接用，提高生产效率。所以 Node.js 在开发轻量级、快速迭代、实时交互等类型的 Web 应用程序方面是有优势的。\n\n从技术角度来讲，轻量、快速、实时的网络应用程序，例如聊天、游戏、社交等领域是 Node.js 的强项。\n\n从资源占用方面来讲，Node.js 通常可以让你用更少的代价去高效的利用资源（CPU、Memory...），以支撑更高的访问量。\n\n相反的，重量级、稳定可靠、安全保密等类型的 Web 应用程序，可能并不适合用 Node.js 来进行开发。但 Node.js 的社区也在不断发展，需要持续关注 Node.js 带来的可能性。\n","slug":"nodejs-brief","published":1,"updated":"2023-07-07T07:58:09.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsakz8m00041a1iau0z9lwi","content":"<!-- toc -->\n\n<h2 id=\"什么是-Node-js\"><a href=\"#什么是-Node-js\" class=\"headerlink\" title=\"什么是 Node.js\"></a>什么是 Node.js</h2><p>官方定义 Node.js 是一个开源的，跨平台的 Javascript 运行时环境。</p>\n<p>要理解这个定义需要从 Javascript 的前身谈起。在 2009 年 Node.js 出现之前，Javascript 只能运行在浏览器中，作为网页脚本使用。而 Node.js 的出现，使 Javascript 可以象其它编程语言一样运行在计算机上，Node.js 之于 Javascript 可以类比 JRE 之于 Java。所以 Node.js 不是一个编程语言，也不是一个 Javascript 框架，它是一整套 Javascript 的运行时环境（Runtime）。</p>\n<p>由于 Node.js 的出现，使 Javascript 彻底摆脱浏览器成为一门独立的编程语言。和其它编程语言 Python, Java, Rube 等一样，除了本身擅长前端开发以外，Javascript 也可以开发后台、GUI程序、CLI命令行工具等等。Javascript 有庞大开发者基础，所以 Node.js 的出现使基于 Javascript 的技术栈直接井喷。</p>\n<p>Node.js 的安装使用可以参考：<a href=\"https://www.runoob.com/nodejs/nodejs-tutorial.html\">Node.js Tutorial</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Node-js-的特点\"><a href=\"#Node-js-的特点\" class=\"headerlink\" title=\"Node.js 的特点\"></a>Node.js 的特点</h2><p>Node.js 本身的核心模块包括文件系统I&#x2F;O、网络（HTTP、TCP、UDP、DNS、TLS&#x2F;SSL等）、二进制数据流、加密算法、数据流等等。Node.js 模块的 API 形式简单，降低了编程的复杂度。</p>\n<p>Node.js 的最大特点在于它基于高性能的 Chrome V8 引擎，提供了一个单线程 NIO (非阻塞队列) 的事件驱动模型。这使它极其高效和轻量级。</p>\n<p><img src=\"/img/node/nodejs-nio.webp\"></p>\n<p>如上图所示，Node.js 的核心是一个事件驱动的单线程非阻塞 Event Loop 用来处理所有的请求（由于是单线程，所以不需要锁，避免了多线程带来的复杂性和开销），这样的设计让 Node.js 非常擅于 IO 密集型的应用，能够充分用效的利用硬件资源，从而提供更高的并发性能。</p>\n<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>引用：<a href=\"https://medium.com/deno-the-complete-reference/node-js-vs-springboot-hello-world-performance-comparison-59b4d461526c\">Node.js vs Springboot: Hello world performance comparison</a></p>\n<p>传统 Spring Boot 和 Node.js 的性能对比。<br><strong>需要说明的是这并不是一个严谨的比较，因为基于 Java 语言也有很多优秀的 NIO 模型框架，比如 Netty、以及基于 Netty 的 spring5-webflux，其提供了恐怖的并发性能。所以这个比较只是一个示例，用于说明 Node.js 在特定场景下的的优势，仅供参考。勿喷。</strong></p>\n<p><img src=\"/img/node/performance.requests.webp\"><br><img src=\"/img/node/performance.cpu.webp\"><br><img src=\"/img/node/performance.memory.webp\"></p>\n<h2 id=\"Node-js-的适用场景\"><a href=\"#Node-js-的适用场景\" class=\"headerlink\" title=\"Node.js 的适用场景\"></a>Node.js 的适用场景</h2><p>迄今为止 Node.js 发展出了一个庞大且完善的生态系统，提供了各种各样的第三方模块和工具，例如 Express、Koa、Nest 以及数不清的 Javascript Library。但传统的语言比如 Java 在生态方面一样非常强大。</p>\n<p>从业务角度来讲 Node.js 的最大优点是易上手、开发简单速度快，Javascript 的语言特性可以让开发者以极快的速度响应不断变化的业务场景，前后端可以用同一种语言实现代码复用。另外生态强大就意味着轮子多，文档完善，有什么需求找合适的轮子直接用，提高生产效率。所以 Node.js 在开发轻量级、快速迭代、实时交互等类型的 Web 应用程序方面是有优势的。</p>\n<p>从技术角度来讲，轻量、快速、实时的网络应用程序，例如聊天、游戏、社交等领域是 Node.js 的强项。</p>\n<p>从资源占用方面来讲，Node.js 通常可以让你用更少的代价去高效的利用资源（CPU、Memory…），以支撑更高的访问量。</p>\n<p>相反的，重量级、稳定可靠、安全保密等类型的 Web 应用程序，可能并不适合用 Node.js 来进行开发。但 Node.js 的社区也在不断发展，需要持续关注 Node.js 带来的可能性。</p>\n","site":{"data":{}},"excerpt":"<!-- toc -->\n\n<h2 id=\"什么是-Node-js\"><a href=\"#什么是-Node-js\" class=\"headerlink\" title=\"什么是 Node.js\"></a>什么是 Node.js</h2><p>官方定义 Node.js 是一个开源的，跨平台的 Javascript 运行时环境。</p>\n<p>要理解这个定义需要从 Javascript 的前身谈起。在 2009 年 Node.js 出现之前，Javascript 只能运行在浏览器中，作为网页脚本使用。而 Node.js 的出现，使 Javascript 可以象其它编程语言一样运行在计算机上，Node.js 之于 Javascript 可以类比 JRE 之于 Java。所以 Node.js 不是一个编程语言，也不是一个 Javascript 框架，它是一整套 Javascript 的运行时环境（Runtime）。</p>\n<p>由于 Node.js 的出现，使 Javascript 彻底摆脱浏览器成为一门独立的编程语言。和其它编程语言 Python, Java, Rube 等一样，除了本身擅长前端开发以外，Javascript 也可以开发后台、GUI程序、CLI命令行工具等等。Javascript 有庞大开发者基础，所以 Node.js 的出现使基于 Javascript 的技术栈直接井喷。</p>\n<p>Node.js 的安装使用可以参考：<a href=\"https://www.runoob.com/nodejs/nodejs-tutorial.html\">Node.js Tutorial</a></p>","more":"<h2 id=\"Node-js-的特点\"><a href=\"#Node-js-的特点\" class=\"headerlink\" title=\"Node.js 的特点\"></a>Node.js 的特点</h2><p>Node.js 本身的核心模块包括文件系统I&#x2F;O、网络（HTTP、TCP、UDP、DNS、TLS&#x2F;SSL等）、二进制数据流、加密算法、数据流等等。Node.js 模块的 API 形式简单，降低了编程的复杂度。</p>\n<p>Node.js 的最大特点在于它基于高性能的 Chrome V8 引擎，提供了一个单线程 NIO (非阻塞队列) 的事件驱动模型。这使它极其高效和轻量级。</p>\n<p><img src=\"/img/node/nodejs-nio.webp\"></p>\n<p>如上图所示，Node.js 的核心是一个事件驱动的单线程非阻塞 Event Loop 用来处理所有的请求（由于是单线程，所以不需要锁，避免了多线程带来的复杂性和开销），这样的设计让 Node.js 非常擅于 IO 密集型的应用，能够充分用效的利用硬件资源，从而提供更高的并发性能。</p>\n<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>引用：<a href=\"https://medium.com/deno-the-complete-reference/node-js-vs-springboot-hello-world-performance-comparison-59b4d461526c\">Node.js vs Springboot: Hello world performance comparison</a></p>\n<p>传统 Spring Boot 和 Node.js 的性能对比。<br><strong>需要说明的是这并不是一个严谨的比较，因为基于 Java 语言也有很多优秀的 NIO 模型框架，比如 Netty、以及基于 Netty 的 spring5-webflux，其提供了恐怖的并发性能。所以这个比较只是一个示例，用于说明 Node.js 在特定场景下的的优势，仅供参考。勿喷。</strong></p>\n<p><img src=\"/img/node/performance.requests.webp\"><br><img src=\"/img/node/performance.cpu.webp\"><br><img src=\"/img/node/performance.memory.webp\"></p>\n<h2 id=\"Node-js-的适用场景\"><a href=\"#Node-js-的适用场景\" class=\"headerlink\" title=\"Node.js 的适用场景\"></a>Node.js 的适用场景</h2><p>迄今为止 Node.js 发展出了一个庞大且完善的生态系统，提供了各种各样的第三方模块和工具，例如 Express、Koa、Nest 以及数不清的 Javascript Library。但传统的语言比如 Java 在生态方面一样非常强大。</p>\n<p>从业务角度来讲 Node.js 的最大优点是易上手、开发简单速度快，Javascript 的语言特性可以让开发者以极快的速度响应不断变化的业务场景，前后端可以用同一种语言实现代码复用。另外生态强大就意味着轮子多，文档完善，有什么需求找合适的轮子直接用，提高生产效率。所以 Node.js 在开发轻量级、快速迭代、实时交互等类型的 Web 应用程序方面是有优势的。</p>\n<p>从技术角度来讲，轻量、快速、实时的网络应用程序，例如聊天、游戏、社交等领域是 Node.js 的强项。</p>\n<p>从资源占用方面来讲，Node.js 通常可以让你用更少的代价去高效的利用资源（CPU、Memory…），以支撑更高的访问量。</p>\n<p>相反的，重量级、稳定可靠、安全保密等类型的 Web 应用程序，可能并不适合用 Node.js 来进行开发。但 Node.js 的社区也在不断发展，需要持续关注 Node.js 带来的可能性。</p>"},{"title":"关于我们","date":"2023-06-30T07:27:00.000Z","_content":"\n我们是一群对信息数字化技术有兴趣，有热情的金融领域的从业人员，创建这个网站，是想把在工作，学习之中的实践，想法，感悟做一个的记录，也期待能够做到积累，甚至帮助他人。\n\n这个网站叫“捷径”，但其实“**捷**” 字仅仅是一个关于我们来自何方的暗示，并非对网站内容的自傲和宣传。恰恰相反，对于技术的演进，数字化的探索，通常没有捷径，不论是系统研发，架构设计，云原生平台，安全技术，每一个领域的落地都往往伴随着失败，试错，妥协，改进，正是在这些略显枯燥，却蕴含挑战的循环中，诞生出服务于企业和客户的数字化解决方案，提高效率，实现价值。而这个网站仅仅是记录我们在企业数字化发展“路径”中的所得，所思，所感，故名为“**捷径**”，期待在这里能和更多的同行交流，学习，成长。\n\n关于网站内容，主要聚焦技术领域的方方面面，前端，后端，开发，设计，架构，安全，AI，数据，初期有可能略显混乱，但现实中最大的挑战却是能否长久的坚持。也期待未来这里能够成长为一个较高水平的技术博客。\n\n最后，在对应github的空间，也有一些小伙伴的开源作品 https://github.com/fintech-path ，有需要的朋友可以参考，也欢迎大家的参与或提出意见。\n\n\n","source":"_posts/welcome.md","raw":"---\ntitle: 关于我们\ndate: 2023-06-30 15:27:00\ntags:\n---\n\n我们是一群对信息数字化技术有兴趣，有热情的金融领域的从业人员，创建这个网站，是想把在工作，学习之中的实践，想法，感悟做一个的记录，也期待能够做到积累，甚至帮助他人。\n\n这个网站叫“捷径”，但其实“**捷**” 字仅仅是一个关于我们来自何方的暗示，并非对网站内容的自傲和宣传。恰恰相反，对于技术的演进，数字化的探索，通常没有捷径，不论是系统研发，架构设计，云原生平台，安全技术，每一个领域的落地都往往伴随着失败，试错，妥协，改进，正是在这些略显枯燥，却蕴含挑战的循环中，诞生出服务于企业和客户的数字化解决方案，提高效率，实现价值。而这个网站仅仅是记录我们在企业数字化发展“路径”中的所得，所思，所感，故名为“**捷径**”，期待在这里能和更多的同行交流，学习，成长。\n\n关于网站内容，主要聚焦技术领域的方方面面，前端，后端，开发，设计，架构，安全，AI，数据，初期有可能略显混乱，但现实中最大的挑战却是能否长久的坚持。也期待未来这里能够成长为一个较高水平的技术博客。\n\n最后，在对应github的空间，也有一些小伙伴的开源作品 https://github.com/fintech-path ，有需要的朋友可以参考，也欢迎大家的参与或提出意见。\n\n\n","slug":"welcome","published":1,"updated":"2023-07-07T08:05:29.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljsakz8n00051a1if0v873v2","content":"<p>我们是一群对信息数字化技术有兴趣，有热情的金融领域的从业人员，创建这个网站，是想把在工作，学习之中的实践，想法，感悟做一个的记录，也期待能够做到积累，甚至帮助他人。</p>\n<p>这个网站叫“捷径”，但其实“<strong>捷</strong>” 字仅仅是一个关于我们来自何方的暗示，并非对网站内容的自傲和宣传。恰恰相反，对于技术的演进，数字化的探索，通常没有捷径，不论是系统研发，架构设计，云原生平台，安全技术，每一个领域的落地都往往伴随着失败，试错，妥协，改进，正是在这些略显枯燥，却蕴含挑战的循环中，诞生出服务于企业和客户的数字化解决方案，提高效率，实现价值。而这个网站仅仅是记录我们在企业数字化发展“路径”中的所得，所思，所感，故名为“<strong>捷径</strong>”，期待在这里能和更多的同行交流，学习，成长。</p>\n<p>关于网站内容，主要聚焦技术领域的方方面面，前端，后端，开发，设计，架构，安全，AI，数据，初期有可能略显混乱，但现实中最大的挑战却是能否长久的坚持。也期待未来这里能够成长为一个较高水平的技术博客。</p>\n<p>最后，在对应github的空间，也有一些小伙伴的开源作品 <a href=\"https://github.com/fintech-path\">https://github.com/fintech-path</a> ，有需要的朋友可以参考，也欢迎大家的参与或提出意见。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们是一群对信息数字化技术有兴趣，有热情的金融领域的从业人员，创建这个网站，是想把在工作，学习之中的实践，想法，感悟做一个的记录，也期待能够做到积累，甚至帮助他人。</p>\n<p>这个网站叫“捷径”，但其实“<strong>捷</strong>” 字仅仅是一个关于我们来自何方的暗示，并非对网站内容的自傲和宣传。恰恰相反，对于技术的演进，数字化的探索，通常没有捷径，不论是系统研发，架构设计，云原生平台，安全技术，每一个领域的落地都往往伴随着失败，试错，妥协，改进，正是在这些略显枯燥，却蕴含挑战的循环中，诞生出服务于企业和客户的数字化解决方案，提高效率，实现价值。而这个网站仅仅是记录我们在企业数字化发展“路径”中的所得，所思，所感，故名为“<strong>捷径</strong>”，期待在这里能和更多的同行交流，学习，成长。</p>\n<p>关于网站内容，主要聚焦技术领域的方方面面，前端，后端，开发，设计，架构，安全，AI，数据，初期有可能略显混乱，但现实中最大的挑战却是能否长久的坚持。也期待未来这里能够成长为一个较高水平的技术博客。</p>\n<p>最后，在对应github的空间，也有一些小伙伴的开源作品 <a href=\"https://github.com/fintech-path\">https://github.com/fintech-path</a> ，有需要的朋友可以参考，也欢迎大家的参与或提出意见。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cljsakz8f00001a1i8ggehng2","category_id":"cljsakz8l00021a1i9mca27v0","_id":"cljsakz8p00091a1i1fsnegj0"},{"post_id":"cljsakz8j00011a1ib9g49kz2","category_id":"cljsakz8o00061a1ib1bo22bq","_id":"cljsakz8r000c1a1i7wfudj9h"},{"post_id":"cljsakz8m00041a1iau0z9lwi","category_id":"cljsakz8o00061a1ib1bo22bq","_id":"cljsakz8r000f1a1icg9t3bwh"}],"PostTag":[{"post_id":"cljsakz8f00001a1i8ggehng2","tag_id":"cljsakz8m00031a1i9rxi3dek","_id":"cljsakz8p00081a1i5wqod483"},{"post_id":"cljsakz8j00011a1ib9g49kz2","tag_id":"cljsakz8o00071a1i46y0aud3","_id":"cljsakz8r000e1a1ib9vqefoc"},{"post_id":"cljsakz8j00011a1ib9g49kz2","tag_id":"cljsakz8q000b1a1i70jjchiq","_id":"cljsakz8r000g1a1i4c28b5rj"},{"post_id":"cljsakz8m00041a1iau0z9lwi","tag_id":"cljsakz8r000d1a1ib48871de","_id":"cljsakz8s000i1a1i29b53g02"},{"post_id":"cljsakz8m00041a1iau0z9lwi","tag_id":"cljsakz8q000b1a1i70jjchiq","_id":"cljsakz8s000j1a1id2jphoto"}],"Tag":[{"name":"测试","_id":"cljsakz8m00031a1i9rxi3dek"},{"name":"react.js","_id":"cljsakz8o00071a1i46y0aud3"},{"name":"前端","_id":"cljsakz8q000b1a1i70jjchiq"},{"name":"nodejs","_id":"cljsakz8r000d1a1ib48871de"}]}}